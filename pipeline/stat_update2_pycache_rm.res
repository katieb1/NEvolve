Reading data
Initializing dataloader
Creating neural network
Training neural network
tensor([[0.0475, 0.0723, 0.0424, 0.0393, 0.0100],
        [0.0457, 0.0742, 0.0435, 0.0429, 0.0101],
        [0.0475, 0.0759, 0.0425, 0.0408, 0.0137],
        [0.0479, 0.0722, 0.0417, 0.0382, 0.0118],
        [0.0468, 0.0746, 0.0420, 0.0424, 0.0119],
        [0.0447, 0.0726, 0.0417, 0.0396, 0.0119],
        [0.0467, 0.0728, 0.0463, 0.0408, 0.0090],
        [0.0486, 0.0743, 0.0431, 0.0421, 0.0095],
        [0.0467, 0.0714, 0.0419, 0.0377, 0.0094],
        [0.0479, 0.0712, 0.0412, 0.0418, 0.0117],
        [0.0444, 0.0728, 0.0414, 0.0403, 0.0097],
        [0.0443, 0.0717, 0.0430, 0.0411, 0.0123],
        [0.0483, 0.0728, 0.0410, 0.0395, 0.0098],
        [0.0461, 0.0740, 0.0440, 0.0406, 0.0110],
        [0.0464, 0.0727, 0.0398, 0.0387, 0.0136],
        [0.0480, 0.0734, 0.0432, 0.0430, 0.0112],
        [0.0458, 0.0739, 0.0428, 0.0400, 0.0123],
        [0.0471, 0.0727, 0.0428, 0.0391, 0.0117],
        [0.0475, 0.0729, 0.0428, 0.0394, 0.0104],
        [0.0471, 0.0728, 0.0449, 0.0419, 0.0112],
        [0.0476, 0.0739, 0.0420, 0.0406, 0.0127],
        [0.0462, 0.0746, 0.0423, 0.0431, 0.0110],
        [0.0470, 0.0723, 0.0417, 0.0425, 0.0113],
        [0.0464, 0.0733, 0.0427, 0.0404, 0.0117],
        [0.0459, 0.0729, 0.0418, 0.0445, 0.0084],
        [0.0462, 0.0749, 0.0438, 0.0411, 0.0092],
        [0.0455, 0.0741, 0.0417, 0.0410, 0.0111],
        [0.0446, 0.0733, 0.0433, 0.0450, 0.0105],
        [0.0488, 0.0747, 0.0409, 0.0411, 0.0150],
        [0.0470, 0.0735, 0.0440, 0.0412, 0.0134],
        [0.0488, 0.0710, 0.0446, 0.0397, 0.0111],
        [0.0467, 0.0731, 0.0442, 0.0415, 0.0110],
        [0.0473, 0.0723, 0.0428, 0.0398, 0.0100],
        [0.0441, 0.0723, 0.0428, 0.0439, 0.0091],
        [0.0476, 0.0710, 0.0452, 0.0397, 0.0086],
        [0.0459, 0.0729, 0.0434, 0.0408, 0.0096],
        [0.0453, 0.0713, 0.0390, 0.0423, 0.0087],
        [0.0463, 0.0745, 0.0425, 0.0418, 0.0113],
        [0.0467, 0.0752, 0.0423, 0.0412, 0.0114],
        [0.0493, 0.0733, 0.0446, 0.0396, 0.0096],
        [0.0471, 0.0720, 0.0436, 0.0418, 0.0104],
        [0.0470, 0.0732, 0.0419, 0.0404, 0.0104],
        [0.0474, 0.0723, 0.0442, 0.0407, 0.0109],
        [0.0457, 0.0736, 0.0421, 0.0400, 0.0131],
        [0.0451, 0.0718, 0.0429, 0.0417, 0.0119],
        [0.0472, 0.0725, 0.0445, 0.0396, 0.0118],
        [0.0454, 0.0732, 0.0429, 0.0401, 0.0105],
        [0.0445, 0.0714, 0.0433, 0.0413, 0.0089],
        [0.0468, 0.0719, 0.0412, 0.0403, 0.0125],
        [0.0473, 0.0730, 0.0434, 0.0405, 0.0112],
        [0.0455, 0.0742, 0.0447, 0.0390, 0.0122],
        [0.0491, 0.0718, 0.0425, 0.0387, 0.0107],
        [0.0454, 0.0720, 0.0438, 0.0419, 0.0096],
        [0.0477, 0.0751, 0.0450, 0.0459, 0.0069],
        [0.0457, 0.0739, 0.0440, 0.0394, 0.0124],
        [0.0457, 0.0710, 0.0440, 0.0420, 0.0115],
        [0.0460, 0.0723, 0.0442, 0.0420, 0.0103],
        [0.0468, 0.0755, 0.0440, 0.0414, 0.0125],
        [0.0471, 0.0741, 0.0443, 0.0397, 0.0143],
        [0.0454, 0.0741, 0.0421, 0.0417, 0.0071],
        [0.0453, 0.0730, 0.0413, 0.0387, 0.0121],
        [0.0483, 0.0735, 0.0432, 0.0402, 0.0114],
        [0.0455, 0.0717, 0.0413, 0.0389, 0.0097],
        [0.0474, 0.0727, 0.0434, 0.0408, 0.0086]], device='cuda:0',
       grad_fn=<ReluBackward0>)
torch.Size([64, 5])
tensor([[0.0453, 0.0734, 0.0412, 0.0393, 0.0116],
        [0.0485, 0.0744, 0.0457, 0.0414, 0.0118],
        [0.0453, 0.0735, 0.0436, 0.0405, 0.0118],
        [0.0481, 0.0747, 0.0435, 0.0411, 0.0133],
        [0.0467, 0.0719, 0.0436, 0.0408, 0.0111],
        [0.0459, 0.0724, 0.0450, 0.0392, 0.0122],
        [0.0467, 0.0726, 0.0428, 0.0393, 0.0105],
        [0.0471, 0.0734, 0.0433, 0.0411, 0.0106],
        [0.0459, 0.0738, 0.0420, 0.0422, 0.0103],
        [0.0491, 0.0720, 0.0451, 0.0413, 0.0114],
        [0.0458, 0.0739, 0.0438, 0.0431, 0.0107],
        [0.0464, 0.0723, 0.0434, 0.0396, 0.0104],
        [0.0479, 0.0733, 0.0424, 0.0394, 0.0096],
        [0.0457, 0.0725, 0.0383, 0.0379, 0.0128],
        [0.0462, 0.0727, 0.0452, 0.0410, 0.0083],
        [0.0480, 0.0732, 0.0443, 0.0406, 0.0117],
        [0.0442, 0.0718, 0.0417, 0.0394, 0.0116],
        [0.0463, 0.0736, 0.0428, 0.0423, 0.0128],
        [0.0444, 0.0712, 0.0408, 0.0400, 0.0119],
        [0.0474, 0.0740, 0.0434, 0.0418, 0.0151],
        [0.0459, 0.0714, 0.0439, 0.0400, 0.0097],
        [0.0463, 0.0726, 0.0416, 0.0398, 0.0140],
        [0.0453, 0.0728, 0.0430, 0.0419, 0.0112],
        [0.0471, 0.0721, 0.0439, 0.0413, 0.0112],
        [0.0483, 0.0720, 0.0397, 0.0402, 0.0104],
        [0.0473, 0.0744, 0.0432, 0.0405, 0.0120],
        [0.0443, 0.0731, 0.0423, 0.0393, 0.0106],
        [0.0487, 0.0754, 0.0439, 0.0424, 0.0110],
        [0.0478, 0.0733, 0.0424, 0.0413, 0.0093],
        [0.0459, 0.0729, 0.0406, 0.0409, 0.0093],
        [0.0461, 0.0721, 0.0436, 0.0414, 0.0091],
        [0.0472, 0.0731, 0.0444, 0.0399, 0.0104],
        [0.0477, 0.0735, 0.0403, 0.0414, 0.0103],
        [0.0441, 0.0726, 0.0425, 0.0413, 0.0106],
        [0.0472, 0.0739, 0.0457, 0.0427, 0.0110],
        [0.0444, 0.0739, 0.0449, 0.0434, 0.0103],
        [0.0459, 0.0720, 0.0443, 0.0440, 0.0094],
        [0.0465, 0.0738, 0.0412, 0.0395, 0.0130],
        [0.0469, 0.0733, 0.0436, 0.0415, 0.0111],
        [0.0447, 0.0703, 0.0435, 0.0390, 0.0104],
        [0.0463, 0.0721, 0.0417, 0.0426, 0.0087],
        [0.0469, 0.0745, 0.0419, 0.0412, 0.0115],
        [0.0468, 0.0720, 0.0431, 0.0401, 0.0100],
        [0.0461, 0.0730, 0.0441, 0.0407, 0.0089],
        [0.0475, 0.0752, 0.0420, 0.0407, 0.0124],
        [0.0450, 0.0734, 0.0419, 0.0405, 0.0115],
        [0.0463, 0.0725, 0.0393, 0.0398, 0.0101],
        [0.0451, 0.0736, 0.0414, 0.0407, 0.0118],
        [0.0471, 0.0743, 0.0439, 0.0391, 0.0082],
        [0.0467, 0.0729, 0.0444, 0.0400, 0.0108],
        [0.0471, 0.0746, 0.0432, 0.0414, 0.0111],
        [0.0463, 0.0712, 0.0436, 0.0378, 0.0108],
        [0.0459, 0.0719, 0.0409, 0.0424, 0.0078],
        [0.0451, 0.0726, 0.0439, 0.0409, 0.0115],
        [0.0448, 0.0745, 0.0444, 0.0400, 0.0104],
        [0.0467, 0.0744, 0.0448, 0.0423, 0.0106],
        [0.0461, 0.0743, 0.0428, 0.0407, 0.0133],
        [0.0451, 0.0710, 0.0414, 0.0408, 0.0105],
        [0.0449, 0.0717, 0.0402, 0.0391, 0.0106],
        [0.0471, 0.0728, 0.0444, 0.0461, 0.0092],
        [0.0456, 0.0753, 0.0435, 0.0437, 0.0135],
        [0.0484, 0.0766, 0.0450, 0.0400, 0.0107],
        [0.0448, 0.0730, 0.0442, 0.0416, 0.0108],
        [0.0462, 0.0731, 0.0426, 0.0440, 0.0108]], device='cuda:0',
       grad_fn=<ReluBackward0>)
torch.Size([64, 5])
tensor([[0.0463, 0.0750, 0.0470, 0.0410, 0.0105],
        [0.0458, 0.0707, 0.0438, 0.0396, 0.0102],
        [0.0462, 0.0732, 0.0427, 0.0399, 0.0116],
        [0.0466, 0.0749, 0.0440, 0.0415, 0.0108],
        [0.0456, 0.0725, 0.0431, 0.0434, 0.0099],
        [0.0458, 0.0717, 0.0424, 0.0431, 0.0075],
        [0.0468, 0.0716, 0.0461, 0.0399, 0.0076],
        [0.0475, 0.0734, 0.0438, 0.0392, 0.0102],
        [0.0477, 0.0724, 0.0428, 0.0422, 0.0079],
        [0.0470, 0.0728, 0.0440, 0.0401, 0.0114],
        [0.0452, 0.0740, 0.0447, 0.0399, 0.0137],
        [0.0474, 0.0729, 0.0460, 0.0398, 0.0109],
        [0.0469, 0.0723, 0.0438, 0.0395, 0.0115],
        [0.0445, 0.0723, 0.0400, 0.0392, 0.0115],
        [0.0476, 0.0714, 0.0421, 0.0415, 0.0076],
        [0.0470, 0.0728, 0.0441, 0.0375, 0.0083],
        [0.0476, 0.0744, 0.0403, 0.0379, 0.0106],
        [0.0476, 0.0743, 0.0465, 0.0412, 0.0093],
        [0.0457, 0.0707, 0.0451, 0.0411, 0.0105],
        [0.0468, 0.0727, 0.0436, 0.0410, 0.0102],
        [0.0450, 0.0745, 0.0433, 0.0403, 0.0099],
        [0.0466, 0.0735, 0.0400, 0.0400, 0.0086],
        [0.0476, 0.0733, 0.0423, 0.0413, 0.0085],
        [0.0472, 0.0730, 0.0429, 0.0391, 0.0124],
        [0.0487, 0.0747, 0.0441, 0.0402, 0.0125],
        [0.0474, 0.0735, 0.0412, 0.0387, 0.0125],
        [0.0490, 0.0721, 0.0447, 0.0404, 0.0115],
        [0.0464, 0.0729, 0.0426, 0.0406, 0.0130],
        [0.0456, 0.0722, 0.0429, 0.0431, 0.0114],
        [0.0468, 0.0734, 0.0434, 0.0401, 0.0082],
        [0.0458, 0.0716, 0.0415, 0.0394, 0.0139],
        [0.0483, 0.0726, 0.0460, 0.0395, 0.0133],
        [0.0486, 0.0708, 0.0410, 0.0383, 0.0097],
        [0.0474, 0.0750, 0.0423, 0.0432, 0.0097],
        [0.0457, 0.0708, 0.0423, 0.0414, 0.0115],
        [0.0467, 0.0712, 0.0428, 0.0393, 0.0099],
        [0.0467, 0.0711, 0.0435, 0.0398, 0.0116],
        [0.0455, 0.0722, 0.0422, 0.0418, 0.0079],
        [0.0452, 0.0721, 0.0440, 0.0412, 0.0133],
        [0.0473, 0.0732, 0.0423, 0.0391, 0.0117],
        [0.0474, 0.0731, 0.0424, 0.0397, 0.0111],
        [0.0462, 0.0730, 0.0414, 0.0414, 0.0102],
        [0.0470, 0.0714, 0.0427, 0.0404, 0.0160],
        [0.0467, 0.0736, 0.0434, 0.0426, 0.0106],
        [0.0459, 0.0730, 0.0444, 0.0415, 0.0091],
        [0.0490, 0.0747, 0.0442, 0.0427, 0.0093],
        [0.0483, 0.0727, 0.0408, 0.0373, 0.0118],
        [0.0474, 0.0746, 0.0432, 0.0418, 0.0103],
        [0.0448, 0.0719, 0.0428, 0.0396, 0.0116],
        [0.0475, 0.0731, 0.0451, 0.0417, 0.0106],
        [0.0470, 0.0742, 0.0420, 0.0407, 0.0105],
        [0.0486, 0.0745, 0.0452, 0.0411, 0.0113],
        [0.0479, 0.0745, 0.0428, 0.0404, 0.0133],
        [0.0480, 0.0736, 0.0431, 0.0430, 0.0120],
        [0.0465, 0.0729, 0.0429, 0.0415, 0.0092],
        [0.0462, 0.0736, 0.0435, 0.0428, 0.0094],
        [0.0430, 0.0736, 0.0419, 0.0411, 0.0130],
        [0.0461, 0.0718, 0.0437, 0.0399, 0.0107],
        [0.0452, 0.0738, 0.0446, 0.0423, 0.0106],
        [0.0473, 0.0747, 0.0437, 0.0385, 0.0119],
        [0.0463, 0.0723, 0.0440, 0.0400, 0.0096],
        [0.0455, 0.0732, 0.0416, 0.0411, 0.0099],
        [0.0474, 0.0728, 0.0433, 0.0412, 0.0122],
        [0.0462, 0.0734, 0.0404, 0.0403, 0.0130]], device='cuda:0',
       grad_fn=<ReluBackward0>)
torch.Size([64, 5])
tensor([[0.0486, 0.0714, 0.0405, 0.0405, 0.0113],
        [0.0446, 0.0745, 0.0419, 0.0428, 0.0125],
        [0.0461, 0.0702, 0.0438, 0.0395, 0.0108],
        [0.0479, 0.0721, 0.0457, 0.0414, 0.0125],
        [0.0467, 0.0714, 0.0408, 0.0402, 0.0114],
        [0.0473, 0.0727, 0.0437, 0.0419, 0.0100],
        [0.0492, 0.0737, 0.0465, 0.0436, 0.0101],
        [0.0470, 0.0748, 0.0429, 0.0417, 0.0091],
        [0.0464, 0.0709, 0.0425, 0.0400, 0.0117],
        [0.0453, 0.0727, 0.0436, 0.0393, 0.0118],
        [0.0453, 0.0723, 0.0419, 0.0407, 0.0103],
        [0.0467, 0.0714, 0.0436, 0.0395, 0.0104],
        [0.0474, 0.0726, 0.0404, 0.0374, 0.0083],
        [0.0486, 0.0743, 0.0430, 0.0425, 0.0105],
        [0.0481, 0.0730, 0.0441, 0.0410, 0.0110],
        [0.0475, 0.0733, 0.0424, 0.0410, 0.0084],
        [0.0479, 0.0722, 0.0433, 0.0405, 0.0078],
        [0.0451, 0.0730, 0.0432, 0.0422, 0.0103],
        [0.0467, 0.0726, 0.0434, 0.0407, 0.0127],
        [0.0483, 0.0722, 0.0423, 0.0380, 0.0110],
        [0.0466, 0.0727, 0.0463, 0.0422, 0.0101],
        [0.0457, 0.0722, 0.0438, 0.0414, 0.0096],
        [0.0471, 0.0728, 0.0443, 0.0403, 0.0117],
        [0.0470, 0.0726, 0.0445, 0.0426, 0.0103],
        [0.0474, 0.0759, 0.0422, 0.0431, 0.0118],
        [0.0462, 0.0725, 0.0426, 0.0393, 0.0099],
        [0.0453, 0.0714, 0.0436, 0.0398, 0.0120],
        [0.0476, 0.0729, 0.0442, 0.0397, 0.0138],
        [0.0455, 0.0736, 0.0428, 0.0437, 0.0126],
        [0.0479, 0.0744, 0.0445, 0.0399, 0.0112],
        [0.0452, 0.0726, 0.0446, 0.0412, 0.0123],
        [0.0458, 0.0727, 0.0407, 0.0409, 0.0102],
        [0.0468, 0.0708, 0.0444, 0.0399, 0.0100],
        [0.0468, 0.0732, 0.0437, 0.0421, 0.0089],
        [0.0460, 0.0746, 0.0428, 0.0401, 0.0137],
        [0.0461, 0.0729, 0.0424, 0.0401, 0.0114],
        [0.0464, 0.0735, 0.0433, 0.0399, 0.0096],
        [0.0433, 0.0742, 0.0475, 0.0426, 0.0094],
        [0.0484, 0.0742, 0.0411, 0.0369, 0.0116],
        [0.0481, 0.0734, 0.0426, 0.0399, 0.0109],
        [0.0473, 0.0747, 0.0423, 0.0405, 0.0132],
        [0.0450, 0.0739, 0.0466, 0.0430, 0.0112],
        [0.0497, 0.0737, 0.0421, 0.0387, 0.0123],
        [0.0451, 0.0742, 0.0424, 0.0417, 0.0085],
        [0.0479, 0.0720, 0.0434, 0.0391, 0.0109],
        [0.0448, 0.0725, 0.0414, 0.0427, 0.0108],
        [0.0475, 0.0733, 0.0396, 0.0421, 0.0117],
        [0.0477, 0.0701, 0.0423, 0.0397, 0.0079],
        [0.0482, 0.0729, 0.0454, 0.0385, 0.0095],
        [0.0434, 0.0724, 0.0432, 0.0381, 0.0102],
        [0.0442, 0.0729, 0.0415, 0.0417, 0.0132],
        [0.0471, 0.0729, 0.0417, 0.0410, 0.0128],
        [0.0469, 0.0736, 0.0422, 0.0396, 0.0109],
        [0.0444, 0.0704, 0.0447, 0.0409, 0.0146],
        [0.0451, 0.0733, 0.0426, 0.0412, 0.0114],
        [0.0469, 0.0737, 0.0422, 0.0403, 0.0095],
        [0.0459, 0.0729, 0.0430, 0.0429, 0.0091],
        [0.0443, 0.0736, 0.0434, 0.0415, 0.0099],
        [0.0473, 0.0731, 0.0443, 0.0411, 0.0124],
        [0.0457, 0.0734, 0.0439, 0.0414, 0.0091],
        [0.0481, 0.0730, 0.0439, 0.0392, 0.0096],
        [0.0467, 0.0723, 0.0437, 0.0409, 0.0083],
        [0.0462, 0.0750, 0.0426, 0.0404, 0.0113],
        [0.0473, 0.0757, 0.0457, 0.0402, 0.0134]], device='cuda:0',
       grad_fn=<ReluBackward0>)
torch.Size([64, 5])
tensor([[0.0491, 0.0732, 0.0440, 0.0411, 0.0106],
        [0.0454, 0.0705, 0.0414, 0.0392, 0.0111],
        [0.0476, 0.0755, 0.0443, 0.0441, 0.0103],
        [0.0450, 0.0737, 0.0456, 0.0423, 0.0110],
        [0.0473, 0.0725, 0.0463, 0.0433, 0.0110],
        [0.0484, 0.0715, 0.0425, 0.0381, 0.0106],
        [0.0470, 0.0700, 0.0422, 0.0390, 0.0098],
        [0.0476, 0.0724, 0.0436, 0.0409, 0.0090],
        [0.0463, 0.0745, 0.0457, 0.0415, 0.0118],
        [0.0480, 0.0742, 0.0443, 0.0407, 0.0124],
        [0.0468, 0.0749, 0.0402, 0.0399, 0.0134],
        [0.0471, 0.0715, 0.0410, 0.0395, 0.0121],
        [0.0466, 0.0712, 0.0423, 0.0397, 0.0114],
        [0.0460, 0.0736, 0.0430, 0.0428, 0.0114],
        [0.0460, 0.0734, 0.0416, 0.0415, 0.0090],
        [0.0453, 0.0728, 0.0439, 0.0418, 0.0104],
        [0.0455, 0.0729, 0.0440, 0.0410, 0.0115],
        [0.0460, 0.0716, 0.0421, 0.0412, 0.0100],
        [0.0468, 0.0739, 0.0456, 0.0409, 0.0100],
        [0.0454, 0.0751, 0.0434, 0.0420, 0.0123],
        [0.0482, 0.0730, 0.0436, 0.0405, 0.0102],
        [0.0493, 0.0736, 0.0451, 0.0400, 0.0133],
        [0.0450, 0.0745, 0.0433, 0.0423, 0.0139],
        [0.0468, 0.0729, 0.0421, 0.0418, 0.0128],
        [0.0474, 0.0736, 0.0447, 0.0392, 0.0091],
        [0.0477, 0.0710, 0.0480, 0.0407, 0.0084],
        [0.0458, 0.0727, 0.0426, 0.0425, 0.0112],
        [0.0480, 0.0718, 0.0448, 0.0410, 0.0104],
        [0.0458, 0.0735, 0.0445, 0.0413, 0.0087],
        [0.0480, 0.0743, 0.0454, 0.0417, 0.0122],
        [0.0485, 0.0744, 0.0431, 0.0427, 0.0122],
        [0.0453, 0.0735, 0.0437, 0.0424, 0.0108],
        [0.0471, 0.0728, 0.0427, 0.0419, 0.0117],
        [0.0466, 0.0723, 0.0420, 0.0397, 0.0110],
        [0.0447, 0.0723, 0.0433, 0.0396, 0.0104],
        [0.0454, 0.0744, 0.0432, 0.0415, 0.0106],
        [0.0463, 0.0737, 0.0422, 0.0424, 0.0111],
        [0.0465, 0.0742, 0.0450, 0.0429, 0.0106],
        [0.0467, 0.0731, 0.0427, 0.0406, 0.0112],
        [0.0452, 0.0732, 0.0447, 0.0421, 0.0099],
        [0.0475, 0.0740, 0.0450, 0.0400, 0.0105],
        [0.0467, 0.0740, 0.0434, 0.0423, 0.0121],
        [0.0458, 0.0731, 0.0418, 0.0425, 0.0117],
        [0.0483, 0.0728, 0.0410, 0.0381, 0.0093],
        [0.0480, 0.0732, 0.0447, 0.0416, 0.0108],
        [0.0464, 0.0728, 0.0432, 0.0404, 0.0102],
        [0.0461, 0.0738, 0.0421, 0.0405, 0.0106],
        [0.0459, 0.0740, 0.0423, 0.0437, 0.0090],
        [0.0462, 0.0732, 0.0443, 0.0399, 0.0116],
        [0.0464, 0.0739, 0.0430, 0.0416, 0.0111],
        [0.0472, 0.0741, 0.0427, 0.0379, 0.0128],
        [0.0469, 0.0736, 0.0424, 0.0417, 0.0081],
        [0.0440, 0.0730, 0.0406, 0.0394, 0.0128],
        [0.0464, 0.0725, 0.0440, 0.0393, 0.0129],
        [0.0465, 0.0728, 0.0431, 0.0409, 0.0107],
        [0.0460, 0.0718, 0.0421, 0.0411, 0.0111],
        [0.0459, 0.0753, 0.0427, 0.0419, 0.0127],
        [0.0479, 0.0723, 0.0430, 0.0401, 0.0097],
        [0.0474, 0.0740, 0.0441, 0.0401, 0.0118],
        [0.0453, 0.0739, 0.0434, 0.0435, 0.0111],
        [0.0475, 0.0743, 0.0432, 0.0404, 0.0132],
        [0.0451, 0.0735, 0.0436, 0.0412, 0.0098],
        [0.0476, 0.0742, 0.0424, 0.0407, 0.0098],
        [0.0476, 0.0727, 0.0447, 0.0414, 0.0097]], device='cuda:0',
       grad_fn=<ReluBackward0>)
torch.Size([64, 5])
tensor([[0.0454, 0.0736, 0.0428, 0.0404, 0.0119],
        [0.0471, 0.0698, 0.0426, 0.0399, 0.0096],
        [0.0461, 0.0725, 0.0430, 0.0401, 0.0097],
        [0.0462, 0.0712, 0.0434, 0.0397, 0.0106],
        [0.0454, 0.0734, 0.0437, 0.0426, 0.0098],
        [0.0471, 0.0716, 0.0422, 0.0388, 0.0087],
        [0.0464, 0.0726, 0.0404, 0.0397, 0.0117],
        [0.0471, 0.0741, 0.0443, 0.0418, 0.0088],
        [0.0475, 0.0733, 0.0434, 0.0396, 0.0106],
        [0.0472, 0.0741, 0.0435, 0.0412, 0.0126],
        [0.0490, 0.0717, 0.0437, 0.0409, 0.0088],
        [0.0476, 0.0740, 0.0442, 0.0439, 0.0120],
        [0.0482, 0.0740, 0.0424, 0.0436, 0.0121],
        [0.0463, 0.0713, 0.0439, 0.0399, 0.0105],
        [0.0480, 0.0734, 0.0404, 0.0406, 0.0083],
        [0.0451, 0.0736, 0.0448, 0.0419, 0.0087],
        [0.0469, 0.0722, 0.0443, 0.0399, 0.0109],
        [0.0492, 0.0751, 0.0452, 0.0411, 0.0120],
        [0.0464, 0.0726, 0.0434, 0.0411, 0.0093],
        [0.0453, 0.0716, 0.0429, 0.0419, 0.0099],
        [0.0458, 0.0721, 0.0458, 0.0421, 0.0101],
        [0.0455, 0.0738, 0.0413, 0.0395, 0.0117],
        [0.0466, 0.0719, 0.0433, 0.0378, 0.0104],
        [0.0469, 0.0732, 0.0456, 0.0413, 0.0089],
        [0.0473, 0.0704, 0.0406, 0.0404, 0.0082],
        [0.0466, 0.0757, 0.0439, 0.0424, 0.0112],
        [0.0479, 0.0722, 0.0435, 0.0409, 0.0126],
        [0.0459, 0.0755, 0.0435, 0.0427, 0.0107],
        [0.0471, 0.0742, 0.0404, 0.0420, 0.0103],
        [0.0468, 0.0722, 0.0416, 0.0406, 0.0101],
        [0.0445, 0.0734, 0.0435, 0.0417, 0.0132],
        [0.0447, 0.0726, 0.0429, 0.0418, 0.0106],
        [0.0481, 0.0728, 0.0432, 0.0425, 0.0114],
        [0.0458, 0.0741, 0.0455, 0.0429, 0.0105],
        [0.0475, 0.0742, 0.0441, 0.0391, 0.0111],
        [0.0467, 0.0730, 0.0424, 0.0398, 0.0101],
        [0.0448, 0.0716, 0.0421, 0.0408, 0.0117],
        [0.0480, 0.0731, 0.0442, 0.0398, 0.0133],
        [0.0461, 0.0722, 0.0441, 0.0411, 0.0130],
        [0.0445, 0.0726, 0.0436, 0.0388, 0.0108],
        [0.0462, 0.0736, 0.0431, 0.0415, 0.0124],
        [0.0478, 0.0720, 0.0439, 0.0405, 0.0104],
        [0.0448, 0.0736, 0.0437, 0.0395, 0.0118],
        [0.0484, 0.0747, 0.0429, 0.0425, 0.0099],
        [0.0453, 0.0730, 0.0442, 0.0407, 0.0114],
        [0.0472, 0.0724, 0.0435, 0.0402, 0.0128],
        [0.0458, 0.0717, 0.0413, 0.0393, 0.0107],
        [0.0476, 0.0734, 0.0438, 0.0434, 0.0083],
        [0.0454, 0.0721, 0.0386, 0.0393, 0.0111],
        [0.0471, 0.0736, 0.0422, 0.0405, 0.0098],
        [0.0482, 0.0740, 0.0435, 0.0421, 0.0108],
        [0.0463, 0.0765, 0.0435, 0.0422, 0.0121],
        [0.0458, 0.0728, 0.0453, 0.0403, 0.0097],
        [0.0447, 0.0713, 0.0443, 0.0407, 0.0101],
        [0.0448, 0.0709, 0.0445, 0.0387, 0.0099],
        [0.0458, 0.0733, 0.0417, 0.0417, 0.0119],
        [0.0464, 0.0737, 0.0428, 0.0381, 0.0113],
        [0.0472, 0.0741, 0.0422, 0.0423, 0.0125],
        [0.0447, 0.0735, 0.0417, 0.0409, 0.0108],
        [0.0472, 0.0700, 0.0450, 0.0396, 0.0094],
        [0.0456, 0.0747, 0.0453, 0.0431, 0.0121],
        [0.0472, 0.0723, 0.0444, 0.0406, 0.0075],
        [0.0472, 0.0742, 0.0397, 0.0391, 0.0141],
        [0.0452, 0.0732, 0.0440, 0.0435, 0.0107]], device='cuda:0',
       grad_fn=<ReluBackward0>)
torch.Size([64, 5])
tensor([[0.0469, 0.0707, 0.0437, 0.0416, 0.0084],
        [0.0460, 0.0727, 0.0430, 0.0414, 0.0105],
        [0.0456, 0.0738, 0.0421, 0.0426, 0.0113],
        [0.0462, 0.0731, 0.0426, 0.0391, 0.0080],
        [0.0468, 0.0716, 0.0424, 0.0407, 0.0138],
        [0.0467, 0.0724, 0.0434, 0.0406, 0.0092],
        [0.0437, 0.0725, 0.0451, 0.0403, 0.0124],
        [0.0450, 0.0735, 0.0426, 0.0405, 0.0102],
        [0.0471, 0.0735, 0.0415, 0.0419, 0.0107],
        [0.0475, 0.0714, 0.0413, 0.0404, 0.0082],
        [0.0481, 0.0730, 0.0439, 0.0397, 0.0118],
        [0.0485, 0.0718, 0.0428, 0.0399, 0.0102],
        [0.0466, 0.0738, 0.0447, 0.0426, 0.0102],
        [0.0461, 0.0716, 0.0437, 0.0398, 0.0118],
        [0.0444, 0.0737, 0.0426, 0.0410, 0.0113],
        [0.0485, 0.0738, 0.0460, 0.0420, 0.0104],
        [0.0477, 0.0753, 0.0441, 0.0416, 0.0116],
        [0.0468, 0.0717, 0.0431, 0.0392, 0.0113],
        [0.0469, 0.0716, 0.0429, 0.0392, 0.0099],
        [0.0453, 0.0735, 0.0466, 0.0422, 0.0087],
        [0.0466, 0.0728, 0.0420, 0.0401, 0.0105],
        [0.0474, 0.0726, 0.0431, 0.0395, 0.0073],
        [0.0460, 0.0722, 0.0434, 0.0388, 0.0102],
        [0.0452, 0.0715, 0.0439, 0.0403, 0.0117],
        [0.0485, 0.0727, 0.0465, 0.0396, 0.0109],
        [0.0445, 0.0710, 0.0391, 0.0412, 0.0091],
        [0.0472, 0.0715, 0.0439, 0.0407, 0.0141],
        [0.0467, 0.0724, 0.0447, 0.0381, 0.0128],
        [0.0469, 0.0710, 0.0410, 0.0395, 0.0101],
        [0.0458, 0.0735, 0.0429, 0.0418, 0.0089],
        [0.0491, 0.0728, 0.0436, 0.0400, 0.0111],
        [0.0458, 0.0733, 0.0446, 0.0395, 0.0124],
        [0.0456, 0.0731, 0.0444, 0.0413, 0.0087],
        [0.0459, 0.0741, 0.0442, 0.0415, 0.0120],
        [0.0467, 0.0731, 0.0434, 0.0422, 0.0084],
        [0.0449, 0.0721, 0.0426, 0.0391, 0.0107],
        [0.0477, 0.0738, 0.0426, 0.0434, 0.0085],
        [0.0474, 0.0738, 0.0442, 0.0404, 0.0115],
        [0.0467, 0.0739, 0.0429, 0.0411, 0.0126],
        [0.0492, 0.0730, 0.0456, 0.0405, 0.0077],
        [0.0464, 0.0727, 0.0427, 0.0416, 0.0109],
        [0.0456, 0.0714, 0.0412, 0.0425, 0.0104],
        [0.0471, 0.0723, 0.0449, 0.0390, 0.0112],
        [0.0461, 0.0747, 0.0430, 0.0408, 0.0128],
        [0.0473, 0.0732, 0.0428, 0.0424, 0.0114],
        [0.0479, 0.0732, 0.0450, 0.0374, 0.0096],
        [0.0467, 0.0717, 0.0428, 0.0395, 0.0110],
        [0.0458, 0.0732, 0.0448, 0.0392, 0.0102],
        [0.0474, 0.0722, 0.0421, 0.0392, 0.0113],
        [0.0449, 0.0721, 0.0419, 0.0421, 0.0103],
        [0.0450, 0.0741, 0.0426, 0.0424, 0.0118],
        [0.0475, 0.0722, 0.0451, 0.0405, 0.0106],
        [0.0468, 0.0742, 0.0419, 0.0399, 0.0118],
        [0.0481, 0.0735, 0.0415, 0.0402, 0.0108],
        [0.0472, 0.0719, 0.0420, 0.0410, 0.0103],
        [0.0465, 0.0729, 0.0435, 0.0400, 0.0072],
        [0.0457, 0.0731, 0.0443, 0.0416, 0.0136],
        [0.0465, 0.0739, 0.0438, 0.0402, 0.0079],
        [0.0477, 0.0726, 0.0417, 0.0413, 0.0111],
        [0.0483, 0.0742, 0.0458, 0.0426, 0.0110],
        [0.0471, 0.0719, 0.0429, 0.0422, 0.0112],
        [0.0457, 0.0709, 0.0436, 0.0404, 0.0095],
        [0.0461, 0.0726, 0.0427, 0.0412, 0.0104],
        [0.0451, 0.0732, 0.0456, 0.0406, 0.0104]], device='cuda:0',
       grad_fn=<ReluBackward0>)
torch.Size([64, 5])
tensor([[0.0454, 0.0730, 0.0420, 0.0413, 0.0113],
        [0.0478, 0.0735, 0.0445, 0.0407, 0.0113],
        [0.0465, 0.0715, 0.0407, 0.0389, 0.0111],
        [0.0466, 0.0718, 0.0459, 0.0411, 0.0084],
        [0.0509, 0.0758, 0.0476, 0.0420, 0.0097],
        [0.0457, 0.0730, 0.0405, 0.0420, 0.0109],
        [0.0451, 0.0723, 0.0434, 0.0417, 0.0115],
        [0.0450, 0.0719, 0.0415, 0.0396, 0.0108],
        [0.0455, 0.0757, 0.0440, 0.0419, 0.0098],
        [0.0466, 0.0730, 0.0422, 0.0420, 0.0117],
        [0.0453, 0.0714, 0.0440, 0.0413, 0.0117],
        [0.0472, 0.0711, 0.0406, 0.0382, 0.0109],
        [0.0494, 0.0723, 0.0444, 0.0410, 0.0092],
        [0.0462, 0.0724, 0.0411, 0.0414, 0.0092],
        [0.0463, 0.0720, 0.0392, 0.0408, 0.0122],
        [0.0457, 0.0723, 0.0407, 0.0407, 0.0126],
        [0.0451, 0.0744, 0.0440, 0.0428, 0.0136],
        [0.0459, 0.0719, 0.0442, 0.0406, 0.0111],
        [0.0456, 0.0722, 0.0414, 0.0399, 0.0089],
        [0.0467, 0.0721, 0.0426, 0.0430, 0.0094],
        [0.0464, 0.0768, 0.0442, 0.0420, 0.0119],
        [0.0485, 0.0709, 0.0436, 0.0424, 0.0089],
        [0.0467, 0.0723, 0.0434, 0.0400, 0.0093],
        [0.0475, 0.0733, 0.0432, 0.0401, 0.0119],
        [0.0487, 0.0733, 0.0434, 0.0412, 0.0099],
        [0.0440, 0.0718, 0.0396, 0.0414, 0.0092],
        [0.0458, 0.0701, 0.0421, 0.0390, 0.0129],
        [0.0452, 0.0732, 0.0414, 0.0385, 0.0122],
        [0.0475, 0.0733, 0.0453, 0.0392, 0.0105],
        [0.0464, 0.0720, 0.0420, 0.0409, 0.0118],
        [0.0504, 0.0715, 0.0450, 0.0397, 0.0098],
        [0.0470, 0.0745, 0.0436, 0.0407, 0.0119],
        [0.0462, 0.0726, 0.0433, 0.0396, 0.0107],
        [0.0480, 0.0719, 0.0445, 0.0410, 0.0101],
        [0.0460, 0.0711, 0.0434, 0.0390, 0.0120],
        [0.0469, 0.0712, 0.0434, 0.0406, 0.0130],
        [0.0490, 0.0714, 0.0444, 0.0392, 0.0123],
        [0.0452, 0.0716, 0.0419, 0.0417, 0.0089],
        [0.0429, 0.0710, 0.0430, 0.0400, 0.0105],
        [0.0472, 0.0744, 0.0419, 0.0380, 0.0121],
        [0.0481, 0.0741, 0.0400, 0.0433, 0.0118],
        [0.0491, 0.0734, 0.0421, 0.0411, 0.0131],
        [0.0463, 0.0733, 0.0432, 0.0412, 0.0102],
        [0.0460, 0.0736, 0.0435, 0.0397, 0.0124],
        [0.0464, 0.0728, 0.0452, 0.0415, 0.0093],
        [0.0450, 0.0718, 0.0395, 0.0412, 0.0123],
        [0.0462, 0.0736, 0.0413, 0.0417, 0.0112],
        [0.0434, 0.0738, 0.0421, 0.0427, 0.0105],
        [0.0443, 0.0728, 0.0436, 0.0413, 0.0096],
        [0.0480, 0.0746, 0.0441, 0.0399, 0.0093],
        [0.0469, 0.0754, 0.0432, 0.0402, 0.0103],
        [0.0478, 0.0726, 0.0457, 0.0403, 0.0124],
        [0.0458, 0.0736, 0.0448, 0.0410, 0.0110],
        [0.0462, 0.0716, 0.0433, 0.0403, 0.0103],
        [0.0469, 0.0722, 0.0420, 0.0414, 0.0113],
        [0.0478, 0.0718, 0.0426, 0.0418, 0.0118],
        [0.0464, 0.0731, 0.0423, 0.0368, 0.0113],
        [0.0479, 0.0758, 0.0406, 0.0430, 0.0132],
        [0.0442, 0.0714, 0.0403, 0.0390, 0.0124],
        [0.0469, 0.0703, 0.0437, 0.0394, 0.0092],
        [0.0473, 0.0708, 0.0425, 0.0410, 0.0112],
        [0.0485, 0.0750, 0.0460, 0.0410, 0.0120],
        [0.0446, 0.0724, 0.0433, 0.0419, 0.0116],
        [0.0456, 0.0736, 0.0427, 0.0407, 0.0113]], device='cuda:0',
       grad_fn=<ReluBackward0>)
torch.Size([64, 5])
tensor([[0.0480, 0.0745, 0.0413, 0.0402, 0.0121],
        [0.0488, 0.0719, 0.0451, 0.0421, 0.0096],
        [0.0443, 0.0698, 0.0424, 0.0371, 0.0109],
        [0.0462, 0.0747, 0.0420, 0.0412, 0.0103],
        [0.0470, 0.0741, 0.0424, 0.0423, 0.0122],
        [0.0465, 0.0718, 0.0434, 0.0393, 0.0102],
        [0.0454, 0.0751, 0.0445, 0.0445, 0.0104],
        [0.0444, 0.0715, 0.0401, 0.0405, 0.0107],
        [0.0463, 0.0720, 0.0434, 0.0388, 0.0077],
        [0.0464, 0.0742, 0.0442, 0.0414, 0.0115],
        [0.0458, 0.0715, 0.0427, 0.0416, 0.0090],
        [0.0500, 0.0720, 0.0399, 0.0416, 0.0111],
        [0.0468, 0.0733, 0.0445, 0.0398, 0.0121],
        [0.0449, 0.0716, 0.0402, 0.0388, 0.0117],
        [0.0467, 0.0721, 0.0433, 0.0384, 0.0144],
        [0.0482, 0.0733, 0.0417, 0.0397, 0.0114],
        [0.0453, 0.0740, 0.0437, 0.0410, 0.0101],
        [0.0455, 0.0734, 0.0449, 0.0421, 0.0103],
        [0.0478, 0.0758, 0.0418, 0.0426, 0.0130],
        [0.0434, 0.0712, 0.0421, 0.0419, 0.0101],
        [0.0490, 0.0739, 0.0435, 0.0418, 0.0114],
        [0.0494, 0.0731, 0.0431, 0.0402, 0.0085],
        [0.0449, 0.0727, 0.0412, 0.0405, 0.0113],
        [0.0477, 0.0721, 0.0418, 0.0409, 0.0107],
        [0.0451, 0.0710, 0.0401, 0.0384, 0.0106],
        [0.0440, 0.0713, 0.0463, 0.0403, 0.0091],
        [0.0454, 0.0721, 0.0425, 0.0427, 0.0104],
        [0.0466, 0.0736, 0.0444, 0.0425, 0.0110],
        [0.0475, 0.0748, 0.0459, 0.0413, 0.0093],
        [0.0466, 0.0730, 0.0444, 0.0411, 0.0106],
        [0.0436, 0.0719, 0.0438, 0.0413, 0.0111],
        [0.0457, 0.0738, 0.0408, 0.0383, 0.0131],
        [0.0480, 0.0720, 0.0406, 0.0390, 0.0107],
        [0.0441, 0.0714, 0.0417, 0.0395, 0.0123],
        [0.0486, 0.0745, 0.0433, 0.0404, 0.0135],
        [0.0511, 0.0752, 0.0466, 0.0383, 0.0129],
        [0.0485, 0.0746, 0.0450, 0.0403, 0.0126],
        [0.0483, 0.0734, 0.0435, 0.0402, 0.0111],
        [0.0477, 0.0721, 0.0434, 0.0395, 0.0087],
        [0.0451, 0.0741, 0.0447, 0.0406, 0.0115],
        [0.0444, 0.0751, 0.0405, 0.0416, 0.0128],
        [0.0478, 0.0729, 0.0420, 0.0422, 0.0117],
        [0.0461, 0.0742, 0.0425, 0.0413, 0.0118],
        [0.0463, 0.0734, 0.0440, 0.0432, 0.0139],
        [0.0471, 0.0719, 0.0412, 0.0399, 0.0110],
        [0.0472, 0.0738, 0.0441, 0.0409, 0.0112],
        [0.0468, 0.0712, 0.0422, 0.0403, 0.0102],
        [0.0486, 0.0731, 0.0429, 0.0412, 0.0090],
        [0.0460, 0.0723, 0.0408, 0.0409, 0.0096],
        [0.0488, 0.0757, 0.0431, 0.0411, 0.0100],
        [0.0458, 0.0739, 0.0420, 0.0395, 0.0143],
        [0.0459, 0.0727, 0.0441, 0.0423, 0.0095],
        [0.0457, 0.0707, 0.0412, 0.0386, 0.0110],
        [0.0476, 0.0739, 0.0441, 0.0413, 0.0127],
        [0.0451, 0.0714, 0.0438, 0.0410, 0.0099],
        [0.0466, 0.0723, 0.0416, 0.0387, 0.0084],
        [0.0481, 0.0738, 0.0433, 0.0403, 0.0101],
        [0.0453, 0.0724, 0.0438, 0.0407, 0.0102],
        [0.0461, 0.0733, 0.0429, 0.0412, 0.0111],
        [0.0467, 0.0738, 0.0425, 0.0429, 0.0119],
        [0.0473, 0.0737, 0.0449, 0.0389, 0.0103],
        [0.0444, 0.0714, 0.0411, 0.0406, 0.0107],
        [0.0462, 0.0718, 0.0433, 0.0387, 0.0127],
        [0.0449, 0.0716, 0.0418, 0.0403, 0.0077]], device='cuda:0',
       grad_fn=<ReluBackward0>)
torch.Size([64, 5])
tensor([[0.0494, 0.0715, 0.0436, 0.0406, 0.0103],
        [0.0446, 0.0751, 0.0432, 0.0421, 0.0115],
        [0.0472, 0.0732, 0.0404, 0.0388, 0.0104],
        [0.0438, 0.0729, 0.0423, 0.0422, 0.0094],
        [0.0470, 0.0739, 0.0427, 0.0400, 0.0091],
        [0.0476, 0.0722, 0.0426, 0.0399, 0.0099],
        [0.0463, 0.0719, 0.0437, 0.0398, 0.0092],
        [0.0463, 0.0727, 0.0413, 0.0397, 0.0097],
        [0.0480, 0.0731, 0.0442, 0.0416, 0.0077],
        [0.0466, 0.0733, 0.0429, 0.0390, 0.0099],
        [0.0473, 0.0737, 0.0424, 0.0397, 0.0111],
        [0.0465, 0.0734, 0.0414, 0.0406, 0.0125],
        [0.0460, 0.0728, 0.0439, 0.0415, 0.0128],
        [0.0472, 0.0725, 0.0466, 0.0399, 0.0109],
        [0.0447, 0.0721, 0.0433, 0.0393, 0.0144],
        [0.0456, 0.0738, 0.0427, 0.0416, 0.0121],
        [0.0453, 0.0726, 0.0427, 0.0400, 0.0137],
        [0.0456, 0.0734, 0.0413, 0.0422, 0.0119],
        [0.0457, 0.0725, 0.0434, 0.0405, 0.0095],
        [0.0475, 0.0722, 0.0431, 0.0393, 0.0099],
        [0.0458, 0.0724, 0.0437, 0.0401, 0.0115],
        [0.0452, 0.0734, 0.0423, 0.0415, 0.0112],
        [0.0483, 0.0733, 0.0450, 0.0406, 0.0083],
        [0.0474, 0.0739, 0.0429, 0.0406, 0.0118],
        [0.0464, 0.0748, 0.0455, 0.0443, 0.0100],
        [0.0462, 0.0728, 0.0419, 0.0381, 0.0135],
        [0.0454, 0.0702, 0.0429, 0.0399, 0.0094],
        [0.0433, 0.0718, 0.0413, 0.0386, 0.0115],
        [0.0452, 0.0717, 0.0437, 0.0417, 0.0090],
        [0.0465, 0.0730, 0.0442, 0.0396, 0.0126],
        [0.0461, 0.0730, 0.0434, 0.0402, 0.0108],
        [0.0468, 0.0761, 0.0461, 0.0420, 0.0146],
        [0.0488, 0.0740, 0.0476, 0.0405, 0.0109],
        [0.0447, 0.0745, 0.0438, 0.0428, 0.0138],
        [0.0451, 0.0728, 0.0437, 0.0412, 0.0095],
        [0.0477, 0.0740, 0.0421, 0.0402, 0.0138],
        [0.0469, 0.0727, 0.0407, 0.0404, 0.0099],
        [0.0465, 0.0731, 0.0429, 0.0401, 0.0107],
        [0.0451, 0.0722, 0.0419, 0.0402, 0.0093],
        [0.0457, 0.0725, 0.0412, 0.0419, 0.0085],
        [0.0461, 0.0717, 0.0415, 0.0413, 0.0105],
        [0.0461, 0.0737, 0.0428, 0.0427, 0.0072],
        [0.0462, 0.0754, 0.0447, 0.0447, 0.0138],
        [0.0449, 0.0730, 0.0405, 0.0400, 0.0094],
        [0.0462, 0.0709, 0.0445, 0.0390, 0.0091],
        [0.0479, 0.0745, 0.0444, 0.0412, 0.0108],
        [0.0469, 0.0710, 0.0450, 0.0423, 0.0101],
        [0.0455, 0.0724, 0.0433, 0.0420, 0.0124],
        [0.0446, 0.0715, 0.0410, 0.0414, 0.0093],
        [0.0472, 0.0725, 0.0401, 0.0415, 0.0130],
        [0.0484, 0.0733, 0.0438, 0.0412, 0.0101],
        [0.0478, 0.0733, 0.0430, 0.0402, 0.0095],
        [0.0461, 0.0723, 0.0436, 0.0413, 0.0094],
        [0.0499, 0.0749, 0.0450, 0.0409, 0.0110],
        [0.0455, 0.0729, 0.0415, 0.0412, 0.0125],
        [0.0491, 0.0748, 0.0448, 0.0423, 0.0101],
        [0.0460, 0.0723, 0.0429, 0.0407, 0.0102],
        [0.0450, 0.0726, 0.0410, 0.0404, 0.0120],
        [0.0470, 0.0720, 0.0417, 0.0415, 0.0097],
        [0.0470, 0.0724, 0.0416, 0.0387, 0.0112],
        [0.0443, 0.0736, 0.0432, 0.0413, 0.0128],
        [0.0474, 0.0737, 0.0411, 0.0405, 0.0133],
        [0.0475, 0.0739, 0.0432, 0.0422, 0.0109],
        [0.0453, 0.0710, 0.0448, 0.0410, 0.0075]], device='cuda:0',
       grad_fn=<ReluBackward0>)
torch.Size([64, 5])
tensor([[0.0472, 0.0734, 0.0436, 0.0394, 0.0099],
        [0.0472, 0.0747, 0.0424, 0.0416, 0.0124],
        [0.0467, 0.0721, 0.0427, 0.0392, 0.0116],
        [0.0430, 0.0714, 0.0441, 0.0388, 0.0110],
        [0.0467, 0.0726, 0.0458, 0.0404, 0.0114],
        [0.0468, 0.0702, 0.0426, 0.0402, 0.0091],
        [0.0454, 0.0743, 0.0427, 0.0423, 0.0113],
        [0.0444, 0.0728, 0.0434, 0.0445, 0.0080],
        [0.0458, 0.0728, 0.0436, 0.0400, 0.0110],
        [0.0463, 0.0726, 0.0425, 0.0418, 0.0095],
        [0.0469, 0.0729, 0.0399, 0.0417, 0.0106],
        [0.0471, 0.0738, 0.0443, 0.0392, 0.0119],
        [0.0491, 0.0744, 0.0417, 0.0393, 0.0100],
        [0.0474, 0.0732, 0.0438, 0.0424, 0.0100],
        [0.0473, 0.0717, 0.0439, 0.0402, 0.0099],
        [0.0454, 0.0726, 0.0438, 0.0418, 0.0092],
        [0.0443, 0.0730, 0.0417, 0.0416, 0.0117],
        [0.0461, 0.0731, 0.0429, 0.0398, 0.0103],
        [0.0459, 0.0733, 0.0424, 0.0402, 0.0125],
        [0.0448, 0.0713, 0.0458, 0.0398, 0.0110],
        [0.0455, 0.0703, 0.0431, 0.0385, 0.0104],
        [0.0468, 0.0725, 0.0423, 0.0393, 0.0096],
        [0.0446, 0.0716, 0.0451, 0.0403, 0.0103],
        [0.0480, 0.0711, 0.0440, 0.0418, 0.0105],
        [0.0463, 0.0723, 0.0435, 0.0404, 0.0112],
        [0.0470, 0.0748, 0.0436, 0.0396, 0.0126],
        [0.0465, 0.0736, 0.0415, 0.0392, 0.0117],
        [0.0461, 0.0714, 0.0431, 0.0387, 0.0114],
        [0.0467, 0.0720, 0.0436, 0.0407, 0.0114],
        [0.0466, 0.0740, 0.0406, 0.0399, 0.0087],
        [0.0471, 0.0731, 0.0406, 0.0394, 0.0115],
        [0.0463, 0.0748, 0.0418, 0.0422, 0.0116],
        [0.0484, 0.0737, 0.0429, 0.0432, 0.0119],
        [0.0468, 0.0749, 0.0429, 0.0400, 0.0137],
        [0.0469, 0.0760, 0.0480, 0.0419, 0.0104],
        [0.0465, 0.0733, 0.0430, 0.0412, 0.0105],
        [0.0466, 0.0726, 0.0426, 0.0410, 0.0138],
        [0.0465, 0.0721, 0.0434, 0.0403, 0.0117],
        [0.0449, 0.0745, 0.0434, 0.0415, 0.0128],
        [0.0464, 0.0730, 0.0433, 0.0387, 0.0100],
        [0.0457, 0.0731, 0.0395, 0.0395, 0.0110],
        [0.0446, 0.0725, 0.0423, 0.0410, 0.0118],
        [0.0467, 0.0711, 0.0421, 0.0406, 0.0105],
        [0.0464, 0.0739, 0.0440, 0.0409, 0.0105],
        [0.0468, 0.0728, 0.0450, 0.0424, 0.0100],
        [0.0466, 0.0718, 0.0417, 0.0404, 0.0105],
        [0.0474, 0.0723, 0.0422, 0.0410, 0.0103],
        [0.0483, 0.0753, 0.0431, 0.0410, 0.0132],
        [0.0479, 0.0730, 0.0455, 0.0408, 0.0088],
        [0.0450, 0.0734, 0.0421, 0.0400, 0.0116],
        [0.0449, 0.0758, 0.0428, 0.0413, 0.0124],
        [0.0466, 0.0722, 0.0414, 0.0396, 0.0106],
        [0.0446, 0.0735, 0.0438, 0.0436, 0.0096],
        [0.0457, 0.0730, 0.0422, 0.0425, 0.0110],
        [0.0462, 0.0725, 0.0421, 0.0389, 0.0094],
        [0.0474, 0.0743, 0.0422, 0.0389, 0.0119],
        [0.0466, 0.0726, 0.0428, 0.0403, 0.0130],
        [0.0445, 0.0728, 0.0429, 0.0409, 0.0094],
        [0.0479, 0.0736, 0.0417, 0.0419, 0.0103],
        [0.0466, 0.0734, 0.0410, 0.0421, 0.0105],
        [0.0455, 0.0720, 0.0429, 0.0405, 0.0121],
        [0.0450, 0.0739, 0.0419, 0.0428, 0.0113],
        [0.0479, 0.0743, 0.0438, 0.0395, 0.0113],
        [0.0485, 0.0725, 0.0434, 0.0363, 0.0087]], device='cuda:0',
       grad_fn=<ReluBackward0>)
torch.Size([64, 5])
tensor([[0.0475, 0.0725, 0.0420, 0.0404, 0.0112],
        [0.0464, 0.0714, 0.0428, 0.0398, 0.0097],
        [0.0481, 0.0729, 0.0448, 0.0404, 0.0087],
        [0.0473, 0.0747, 0.0426, 0.0395, 0.0111],
        [0.0473, 0.0722, 0.0454, 0.0417, 0.0117],
        [0.0460, 0.0729, 0.0438, 0.0422, 0.0100],
        [0.0454, 0.0732, 0.0409, 0.0436, 0.0086],
        [0.0482, 0.0727, 0.0428, 0.0383, 0.0114],
        [0.0491, 0.0729, 0.0420, 0.0403, 0.0076],
        [0.0459, 0.0721, 0.0440, 0.0406, 0.0093],
        [0.0457, 0.0717, 0.0427, 0.0420, 0.0090],
        [0.0458, 0.0720, 0.0414, 0.0387, 0.0123],
        [0.0463, 0.0725, 0.0438, 0.0414, 0.0101],
        [0.0476, 0.0728, 0.0414, 0.0411, 0.0119],
        [0.0472, 0.0703, 0.0433, 0.0403, 0.0118],
        [0.0457, 0.0723, 0.0422, 0.0433, 0.0110],
        [0.0482, 0.0720, 0.0442, 0.0406, 0.0096],
        [0.0468, 0.0727, 0.0435, 0.0398, 0.0097],
        [0.0475, 0.0706, 0.0435, 0.0393, 0.0101],
        [0.0446, 0.0721, 0.0445, 0.0399, 0.0118],
        [0.0454, 0.0734, 0.0413, 0.0395, 0.0121],
        [0.0478, 0.0736, 0.0424, 0.0409, 0.0114],
        [0.0475, 0.0748, 0.0451, 0.0391, 0.0082],
        [0.0468, 0.0740, 0.0424, 0.0417, 0.0110],
        [0.0468, 0.0745, 0.0445, 0.0414, 0.0125],
        [0.0480, 0.0719, 0.0434, 0.0397, 0.0107],
        [0.0465, 0.0733, 0.0422, 0.0396, 0.0148],
        [0.0470, 0.0731, 0.0429, 0.0408, 0.0103],
        [0.0459, 0.0714, 0.0417, 0.0389, 0.0107],
        [0.0475, 0.0732, 0.0429, 0.0396, 0.0087],
        [0.0453, 0.0738, 0.0450, 0.0429, 0.0113],
        [0.0463, 0.0721, 0.0425, 0.0411, 0.0107],
        [0.0466, 0.0738, 0.0429, 0.0416, 0.0101],
        [0.0462, 0.0745, 0.0418, 0.0378, 0.0105],
        [0.0475, 0.0715, 0.0432, 0.0412, 0.0092],
        [0.0486, 0.0732, 0.0415, 0.0438, 0.0093],
        [0.0497, 0.0740, 0.0406, 0.0396, 0.0112],
        [0.0499, 0.0731, 0.0459, 0.0428, 0.0099],
        [0.0440, 0.0729, 0.0424, 0.0386, 0.0130],
        [0.0458, 0.0728, 0.0408, 0.0391, 0.0097],
        [0.0458, 0.0721, 0.0399, 0.0398, 0.0100],
        [0.0475, 0.0725, 0.0433, 0.0393, 0.0130],
        [0.0466, 0.0733, 0.0417, 0.0410, 0.0123],
        [0.0467, 0.0726, 0.0451, 0.0399, 0.0141],
        [0.0453, 0.0726, 0.0409, 0.0421, 0.0097],
        [0.0456, 0.0711, 0.0412, 0.0411, 0.0102],
        [0.0440, 0.0713, 0.0421, 0.0418, 0.0094],
        [0.0478, 0.0722, 0.0433, 0.0397, 0.0092],
        [0.0476, 0.0726, 0.0444, 0.0414, 0.0114],
        [0.0475, 0.0741, 0.0455, 0.0406, 0.0101],
        [0.0466, 0.0719, 0.0433, 0.0396, 0.0118],
        [0.0493, 0.0742, 0.0445, 0.0389, 0.0145],
        [0.0474, 0.0730, 0.0415, 0.0393, 0.0119],
        [0.0473, 0.0730, 0.0432, 0.0420, 0.0104],
        [0.0450, 0.0722, 0.0444, 0.0415, 0.0088],
        [0.0461, 0.0732, 0.0442, 0.0396, 0.0084],
        [0.0459, 0.0733, 0.0443, 0.0416, 0.0088],
        [0.0444, 0.0720, 0.0422, 0.0393, 0.0114],
        [0.0458, 0.0735, 0.0427, 0.0408, 0.0109],
        [0.0479, 0.0734, 0.0422, 0.0407, 0.0115],
        [0.0449, 0.0716, 0.0430, 0.0402, 0.0099],
        [0.0451, 0.0710, 0.0434, 0.0383, 0.0105],
        [0.0486, 0.0718, 0.0436, 0.0389, 0.0132],
        [0.0446, 0.0711, 0.0405, 0.0393, 0.0098]], device='cuda:0',
       grad_fn=<ReluBackward0>)
torch.Size([64, 5])
tensor([[0.0441, 0.0721, 0.0426, 0.0388, 0.0095],
        [0.0465, 0.0731, 0.0434, 0.0398, 0.0110],
        [0.0458, 0.0743, 0.0437, 0.0416, 0.0112],
        [0.0483, 0.0723, 0.0412, 0.0402, 0.0104],
        [0.0463, 0.0721, 0.0437, 0.0404, 0.0105],
        [0.0456, 0.0740, 0.0423, 0.0405, 0.0106],
        [0.0446, 0.0714, 0.0395, 0.0413, 0.0095],
        [0.0440, 0.0750, 0.0419, 0.0388, 0.0107],
        [0.0459, 0.0740, 0.0447, 0.0434, 0.0090],
        [0.0469, 0.0744, 0.0441, 0.0422, 0.0124],
        [0.0469, 0.0721, 0.0424, 0.0417, 0.0094],
        [0.0473, 0.0733, 0.0449, 0.0406, 0.0130],
        [0.0458, 0.0714, 0.0409, 0.0411, 0.0080],
        [0.0464, 0.0755, 0.0440, 0.0415, 0.0114],
        [0.0456, 0.0729, 0.0413, 0.0412, 0.0089],
        [0.0459, 0.0724, 0.0446, 0.0405, 0.0097],
        [0.0444, 0.0725, 0.0407, 0.0403, 0.0110],
        [0.0445, 0.0722, 0.0456, 0.0441, 0.0077],
        [0.0482, 0.0738, 0.0429, 0.0398, 0.0122],
        [0.0440, 0.0708, 0.0418, 0.0414, 0.0110],
        [0.0475, 0.0740, 0.0428, 0.0403, 0.0096],
        [0.0452, 0.0712, 0.0440, 0.0400, 0.0105],
        [0.0483, 0.0738, 0.0463, 0.0432, 0.0091],
        [0.0465, 0.0744, 0.0449, 0.0446, 0.0088],
        [0.0474, 0.0728, 0.0412, 0.0403, 0.0105],
        [0.0479, 0.0717, 0.0435, 0.0375, 0.0118],
        [0.0433, 0.0741, 0.0427, 0.0440, 0.0117],
        [0.0490, 0.0745, 0.0429, 0.0413, 0.0112],
        [0.0452, 0.0717, 0.0426, 0.0394, 0.0097],
        [0.0490, 0.0742, 0.0460, 0.0422, 0.0109],
        [0.0457, 0.0732, 0.0412, 0.0395, 0.0123],
        [0.0455, 0.0743, 0.0415, 0.0417, 0.0095],
        [0.0461, 0.0734, 0.0402, 0.0403, 0.0106],
        [0.0463, 0.0735, 0.0414, 0.0398, 0.0120],
        [0.0458, 0.0719, 0.0425, 0.0389, 0.0141],
        [0.0453, 0.0715, 0.0420, 0.0402, 0.0111],
        [0.0474, 0.0710, 0.0409, 0.0386, 0.0116],
        [0.0454, 0.0732, 0.0426, 0.0426, 0.0096],
        [0.0447, 0.0729, 0.0432, 0.0398, 0.0116],
        [0.0471, 0.0752, 0.0443, 0.0402, 0.0115],
        [0.0480, 0.0725, 0.0447, 0.0407, 0.0115],
        [0.0470, 0.0719, 0.0419, 0.0432, 0.0083],
        [0.0467, 0.0716, 0.0438, 0.0417, 0.0113],
        [0.0474, 0.0732, 0.0447, 0.0402, 0.0113],
        [0.0478, 0.0734, 0.0430, 0.0424, 0.0101],
        [0.0442, 0.0721, 0.0436, 0.0416, 0.0113],
        [0.0461, 0.0731, 0.0426, 0.0399, 0.0082],
        [0.0472, 0.0748, 0.0428, 0.0423, 0.0113],
        [0.0457, 0.0728, 0.0435, 0.0433, 0.0105],
        [0.0471, 0.0715, 0.0447, 0.0424, 0.0098],
        [0.0467, 0.0731, 0.0440, 0.0393, 0.0114],
        [0.0466, 0.0721, 0.0428, 0.0395, 0.0121],
        [0.0466, 0.0743, 0.0416, 0.0428, 0.0102],
        [0.0475, 0.0734, 0.0448, 0.0386, 0.0102],
        [0.0463, 0.0725, 0.0428, 0.0399, 0.0112],
        [0.0464, 0.0717, 0.0434, 0.0409, 0.0092],
        [0.0451, 0.0736, 0.0429, 0.0413, 0.0100],
        [0.0478, 0.0721, 0.0436, 0.0398, 0.0106],
        [0.0468, 0.0730, 0.0448, 0.0395, 0.0091],
        [0.0447, 0.0720, 0.0423, 0.0407, 0.0104],
        [0.0469, 0.0721, 0.0430, 0.0399, 0.0106],
        [0.0476, 0.0717, 0.0429, 0.0425, 0.0090],
        [0.0475, 0.0737, 0.0430, 0.0398, 0.0111],
        [0.0481, 0.0725, 0.0441, 0.0387, 0.0100]], device='cuda:0',
       grad_fn=<ReluBackward0>)
torch.Size([64, 5])
tensor([[0.0439, 0.0709, 0.0427, 0.0404, 0.0112],
        [0.0492, 0.0732, 0.0448, 0.0408, 0.0085],
        [0.0470, 0.0750, 0.0440, 0.0408, 0.0112],
        [0.0486, 0.0742, 0.0400, 0.0405, 0.0118],
        [0.0471, 0.0727, 0.0450, 0.0382, 0.0129],
        [0.0473, 0.0723, 0.0431, 0.0396, 0.0081],
        [0.0442, 0.0727, 0.0442, 0.0397, 0.0130],
        [0.0460, 0.0732, 0.0430, 0.0431, 0.0119],
        [0.0470, 0.0725, 0.0448, 0.0392, 0.0121],
        [0.0467, 0.0737, 0.0448, 0.0415, 0.0129],
        [0.0460, 0.0721, 0.0454, 0.0419, 0.0108],
        [0.0459, 0.0724, 0.0425, 0.0420, 0.0117],
        [0.0453, 0.0718, 0.0421, 0.0404, 0.0099],
        [0.0458, 0.0738, 0.0433, 0.0416, 0.0129],
        [0.0464, 0.0732, 0.0432, 0.0407, 0.0128],
        [0.0469, 0.0727, 0.0441, 0.0408, 0.0115],
        [0.0475, 0.0735, 0.0466, 0.0398, 0.0125],
        [0.0495, 0.0712, 0.0475, 0.0389, 0.0094],
        [0.0484, 0.0736, 0.0428, 0.0403, 0.0096],
        [0.0499, 0.0745, 0.0461, 0.0424, 0.0082],
        [0.0468, 0.0730, 0.0424, 0.0396, 0.0103],
        [0.0475, 0.0729, 0.0427, 0.0403, 0.0096],
        [0.0475, 0.0732, 0.0413, 0.0400, 0.0099],
        [0.0473, 0.0739, 0.0438, 0.0422, 0.0112],
        [0.0466, 0.0729, 0.0435, 0.0390, 0.0101],
        [0.0438, 0.0725, 0.0445, 0.0410, 0.0112],
        [0.0473, 0.0741, 0.0439, 0.0417, 0.0104],
        [0.0465, 0.0734, 0.0431, 0.0413, 0.0121],
        [0.0461, 0.0736, 0.0424, 0.0413, 0.0114],
        [0.0452, 0.0743, 0.0437, 0.0417, 0.0099],
        [0.0478, 0.0723, 0.0423, 0.0391, 0.0078],
        [0.0482, 0.0711, 0.0401, 0.0369, 0.0105],
        [0.0475, 0.0733, 0.0411, 0.0407, 0.0115],
        [0.0477, 0.0734, 0.0432, 0.0397, 0.0104],
        [0.0445, 0.0730, 0.0430, 0.0443, 0.0142],
        [0.0498, 0.0700, 0.0419, 0.0377, 0.0119],
        [0.0457, 0.0731, 0.0410, 0.0403, 0.0110],
        [0.0467, 0.0734, 0.0434, 0.0377, 0.0109],
        [0.0483, 0.0730, 0.0461, 0.0405, 0.0080],
        [0.0455, 0.0732, 0.0444, 0.0393, 0.0102],
        [0.0448, 0.0749, 0.0447, 0.0420, 0.0087],
        [0.0460, 0.0725, 0.0434, 0.0401, 0.0105],
        [0.0462, 0.0743, 0.0422, 0.0415, 0.0121],
        [0.0460, 0.0709, 0.0431, 0.0412, 0.0083],
        [0.0470, 0.0702, 0.0416, 0.0400, 0.0105],
        [0.0477, 0.0725, 0.0416, 0.0403, 0.0102],
        [0.0494, 0.0722, 0.0462, 0.0405, 0.0084],
        [0.0457, 0.0707, 0.0425, 0.0415, 0.0089],
        [0.0459, 0.0723, 0.0434, 0.0425, 0.0097],
        [0.0472, 0.0736, 0.0419, 0.0408, 0.0108],
        [0.0461, 0.0731, 0.0434, 0.0393, 0.0115],
        [0.0444, 0.0726, 0.0385, 0.0407, 0.0094],
        [0.0462, 0.0730, 0.0417, 0.0393, 0.0132],
        [0.0461, 0.0738, 0.0414, 0.0410, 0.0089],
        [0.0481, 0.0732, 0.0433, 0.0419, 0.0109],
        [0.0451, 0.0721, 0.0448, 0.0411, 0.0099],
        [0.0468, 0.0725, 0.0429, 0.0413, 0.0096],
        [0.0474, 0.0708, 0.0429, 0.0422, 0.0084],
        [0.0481, 0.0735, 0.0430, 0.0397, 0.0112],
        [0.0443, 0.0698, 0.0436, 0.0384, 0.0097],
        [0.0487, 0.0731, 0.0435, 0.0398, 0.0139],
        [0.0468, 0.0729, 0.0435, 0.0375, 0.0105],
        [0.0467, 0.0739, 0.0410, 0.0403, 0.0104],
        [0.0463, 0.0736, 0.0440, 0.0409, 0.0110]], device='cuda:0',
       grad_fn=<ReluBackward0>)
torch.Size([64, 5])
tensor([[0.0462, 0.0736, 0.0408, 0.0413, 0.0089],
        [0.0454, 0.0723, 0.0443, 0.0401, 0.0123],
        [0.0471, 0.0726, 0.0441, 0.0411, 0.0115],
        [0.0455, 0.0738, 0.0435, 0.0429, 0.0099],
        [0.0478, 0.0733, 0.0425, 0.0386, 0.0089],
        [0.0452, 0.0741, 0.0421, 0.0402, 0.0118],
        [0.0475, 0.0744, 0.0428, 0.0402, 0.0107],
        [0.0460, 0.0733, 0.0433, 0.0419, 0.0073],
        [0.0455, 0.0740, 0.0439, 0.0428, 0.0112],
        [0.0478, 0.0736, 0.0443, 0.0408, 0.0113],
        [0.0470, 0.0726, 0.0425, 0.0400, 0.0112],
        [0.0453, 0.0714, 0.0436, 0.0395, 0.0142],
        [0.0473, 0.0718, 0.0444, 0.0384, 0.0111],
        [0.0466, 0.0728, 0.0444, 0.0405, 0.0111],
        [0.0487, 0.0711, 0.0435, 0.0397, 0.0108],
        [0.0458, 0.0728, 0.0442, 0.0417, 0.0083],
        [0.0471, 0.0730, 0.0443, 0.0398, 0.0107],
        [0.0451, 0.0726, 0.0427, 0.0421, 0.0112],
        [0.0460, 0.0751, 0.0439, 0.0418, 0.0126],
        [0.0452, 0.0721, 0.0406, 0.0415, 0.0142],
        [0.0478, 0.0732, 0.0424, 0.0413, 0.0101],
        [0.0477, 0.0750, 0.0437, 0.0394, 0.0134],
        [0.0500, 0.0754, 0.0418, 0.0409, 0.0133],
        [0.0464, 0.0733, 0.0445, 0.0405, 0.0106],
        [0.0484, 0.0737, 0.0428, 0.0404, 0.0109],
        [0.0455, 0.0729, 0.0442, 0.0429, 0.0102],
        [0.0454, 0.0719, 0.0407, 0.0396, 0.0112],
        [0.0473, 0.0724, 0.0433, 0.0403, 0.0120],
        [0.0458, 0.0715, 0.0424, 0.0400, 0.0121],
        [0.0481, 0.0721, 0.0453, 0.0413, 0.0094],
        [0.0463, 0.0749, 0.0418, 0.0419, 0.0104],
        [0.0465, 0.0734, 0.0422, 0.0428, 0.0120],
        [0.0494, 0.0715, 0.0411, 0.0394, 0.0100],
        [0.0464, 0.0726, 0.0424, 0.0392, 0.0091],
        [0.0474, 0.0743, 0.0427, 0.0408, 0.0095],
        [0.0443, 0.0723, 0.0439, 0.0405, 0.0110],
        [0.0461, 0.0727, 0.0422, 0.0432, 0.0106],
        [0.0472, 0.0716, 0.0431, 0.0409, 0.0106],
        [0.0461, 0.0708, 0.0434, 0.0413, 0.0091],
        [0.0462, 0.0730, 0.0414, 0.0405, 0.0086],
        [0.0472, 0.0728, 0.0440, 0.0398, 0.0118],
        [0.0466, 0.0733, 0.0438, 0.0409, 0.0105],
        [0.0463, 0.0735, 0.0421, 0.0405, 0.0120],
        [0.0455, 0.0740, 0.0379, 0.0414, 0.0084],
        [0.0478, 0.0731, 0.0448, 0.0397, 0.0107],
        [0.0473, 0.0715, 0.0435, 0.0392, 0.0078],
        [0.0466, 0.0722, 0.0442, 0.0399, 0.0091],
        [0.0463, 0.0725, 0.0414, 0.0380, 0.0121],
        [0.0452, 0.0732, 0.0419, 0.0399, 0.0127],
        [0.0447, 0.0716, 0.0419, 0.0393, 0.0098],
        [0.0459, 0.0712, 0.0433, 0.0385, 0.0113],
        [0.0450, 0.0731, 0.0442, 0.0417, 0.0092],
        [0.0463, 0.0714, 0.0433, 0.0405, 0.0106],
        [0.0489, 0.0706, 0.0431, 0.0392, 0.0129],
        [0.0475, 0.0726, 0.0446, 0.0396, 0.0109],
        [0.0478, 0.0742, 0.0421, 0.0390, 0.0123],
        [0.0481, 0.0739, 0.0437, 0.0407, 0.0132],
        [0.0474, 0.0750, 0.0419, 0.0395, 0.0133],
        [0.0451, 0.0726, 0.0423, 0.0414, 0.0118],
        [0.0441, 0.0732, 0.0406, 0.0412, 0.0100],
        [0.0472, 0.0738, 0.0427, 0.0406, 0.0110],
        [0.0461, 0.0727, 0.0428, 0.0403, 0.0105],
        [0.0474, 0.0743, 0.0434, 0.0403, 0.0126],
        [0.0442, 0.0726, 0.0448, 0.0422, 0.0107]], device='cuda:0',
       grad_fn=<ReluBackward0>)
torch.Size([64, 5])
tensor([[0.0465, 0.0715, 0.0437, 0.0393, 0.0107],
        [0.0469, 0.0724, 0.0444, 0.0392, 0.0102],
        [0.0447, 0.0726, 0.0425, 0.0393, 0.0104],
        [0.0447, 0.0728, 0.0413, 0.0415, 0.0120],
        [0.0452, 0.0721, 0.0411, 0.0394, 0.0134],
        [0.0461, 0.0729, 0.0421, 0.0395, 0.0093],
        [0.0468, 0.0715, 0.0426, 0.0406, 0.0112],
        [0.0445, 0.0739, 0.0456, 0.0393, 0.0101],
        [0.0482, 0.0751, 0.0441, 0.0429, 0.0095],
        [0.0446, 0.0745, 0.0446, 0.0431, 0.0133],
        [0.0466, 0.0730, 0.0419, 0.0394, 0.0117],
        [0.0445, 0.0711, 0.0437, 0.0410, 0.0116],
        [0.0446, 0.0733, 0.0419, 0.0423, 0.0101],
        [0.0482, 0.0739, 0.0419, 0.0388, 0.0126],
        [0.0443, 0.0736, 0.0416, 0.0404, 0.0106],
        [0.0472, 0.0739, 0.0425, 0.0403, 0.0129],
        [0.0479, 0.0735, 0.0427, 0.0415, 0.0124],
        [0.0477, 0.0728, 0.0446, 0.0399, 0.0104],
        [0.0447, 0.0718, 0.0430, 0.0420, 0.0098],
        [0.0462, 0.0718, 0.0443, 0.0413, 0.0103],
        [0.0457, 0.0734, 0.0434, 0.0419, 0.0115],
        [0.0478, 0.0706, 0.0420, 0.0391, 0.0085],
        [0.0475, 0.0737, 0.0459, 0.0400, 0.0114],
        [0.0450, 0.0731, 0.0406, 0.0389, 0.0102],
        [0.0487, 0.0733, 0.0448, 0.0397, 0.0109],
        [0.0449, 0.0742, 0.0444, 0.0430, 0.0115],
        [0.0456, 0.0717, 0.0420, 0.0387, 0.0081],
        [0.0466, 0.0717, 0.0402, 0.0389, 0.0089],
        [0.0464, 0.0718, 0.0414, 0.0419, 0.0087],
        [0.0472, 0.0731, 0.0439, 0.0429, 0.0085],
        [0.0459, 0.0710, 0.0437, 0.0380, 0.0095],
        [0.0470, 0.0709, 0.0429, 0.0394, 0.0107],
        [0.0460, 0.0736, 0.0425, 0.0410, 0.0098],
        [0.0477, 0.0748, 0.0424, 0.0408, 0.0129],
        [0.0468, 0.0717, 0.0423, 0.0423, 0.0136],
        [0.0456, 0.0720, 0.0409, 0.0406, 0.0108],
        [0.0462, 0.0744, 0.0399, 0.0387, 0.0108],
        [0.0469, 0.0736, 0.0425, 0.0432, 0.0111],
        [0.0464, 0.0722, 0.0440, 0.0411, 0.0105],
        [0.0460, 0.0725, 0.0430, 0.0425, 0.0089],
        [0.0475, 0.0740, 0.0405, 0.0420, 0.0125],
        [0.0475, 0.0741, 0.0427, 0.0392, 0.0122],
        [0.0467, 0.0742, 0.0441, 0.0417, 0.0096],
        [0.0450, 0.0734, 0.0411, 0.0404, 0.0116],
        [0.0476, 0.0737, 0.0441, 0.0422, 0.0093],
        [0.0482, 0.0736, 0.0413, 0.0391, 0.0089],
        [0.0443, 0.0715, 0.0417, 0.0423, 0.0088],
        [0.0458, 0.0732, 0.0448, 0.0427, 0.0114],
        [0.0458, 0.0706, 0.0414, 0.0402, 0.0096],
        [0.0464, 0.0738, 0.0451, 0.0419, 0.0092],
        [0.0477, 0.0734, 0.0435, 0.0402, 0.0110],
        [0.0471, 0.0725, 0.0455, 0.0394, 0.0100],
        [0.0452, 0.0728, 0.0443, 0.0404, 0.0116],
        [0.0467, 0.0740, 0.0434, 0.0390, 0.0115],
        [0.0461, 0.0727, 0.0423, 0.0417, 0.0119],
        [0.0463, 0.0724, 0.0433, 0.0414, 0.0095],
        [0.0486, 0.0738, 0.0455, 0.0415, 0.0109],
        [0.0479, 0.0745, 0.0433, 0.0418, 0.0093],
        [0.0444, 0.0732, 0.0413, 0.0418, 0.0090],
        [0.0454, 0.0718, 0.0417, 0.0432, 0.0095],
        [0.0454, 0.0719, 0.0440, 0.0406, 0.0108],
        [0.0452, 0.0725, 0.0441, 0.0413, 0.0132],
        [0.0480, 0.0734, 0.0431, 0.0416, 0.0116],
        [0.0454, 0.0726, 0.0415, 0.0401, 0.0112]], device='cuda:0',
       grad_fn=<ReluBackward0>)
torch.Size([64, 5])
         12387686 function calls (12382296 primitive calls) in 39.134 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
       33   17.694    0.536   19.244    0.583 {cudf._lib.csv.read_csv}
       48    5.935    0.124    5.935    0.124 {built-in method conv2d}
       12    2.903    0.242    2.903    0.242 {method 'uniform_' of 'torch._C._TensorBase' objects}
       68    2.300    0.034    5.318    0.078 {cudf._lib.copying.gather}
       65    0.682    0.010    1.285    0.020 {cudf._lib.interop.to_dlpack}
  2476055    0.560    0.000    0.966    0.000 {built-in method builtins.isinstance}
       32    0.524    0.016   22.938    0.717 msms.py:112(read_file)
404698/404695    0.521    0.000    0.628    0.000 dtypes.py:222(is_list_dtype)
   283362    0.515    0.000    1.022    0.000 utils.py:298(__setitem__)
   121441    0.468    0.000    1.710    0.000 column.py:1401(build_column)
   404686    0.344    0.000    0.444    0.000 dtypes.py:233(is_struct_dtype)
   121433    0.341    0.000    1.002    0.000 buffer.py:83(_init_from_array_like)
   121441    0.337    0.000    0.337    0.000 column.py:48(__init__)
  1184343    0.335    0.000    0.335    0.000 {built-in method builtins.hasattr}
       12    0.301    0.025    0.301    0.025 {method 'cuda' of 'torch._C._TensorBase' objects}
       32    0.294    0.009   23.232    0.726 msms.py:40(__getitem__)
1109850/1108298    0.288    0.000    0.412    0.000 {built-in method builtins.len}
   283362    0.281    0.000    1.728    0.000 utils.py:287(__setitem__)
   121437    0.275    0.000    0.611    0.000 numerical.py:23(__init__)
404734/404733    0.265    0.000    0.366    0.000 dtypes.py:172(is_categorical_dtype)
   607467    0.256    0.000    0.441    0.000 _collections_abc.py:760(__iter__)
   570373    0.238    0.000    0.242    0.000 {built-in method _abc._abc_instancecheck}
   121433    0.196    0.000    0.315    0.000 buffer.py:133(_buffer_data_from_array_interface)
       16    0.194    0.012    0.194    0.012 {built-in method masked_select}
   606783    0.185    0.000    0.185    0.000 column_accessor.py:47(__getitem__)
   121433    0.184    0.000    0.263    0.000 buffer.py:145(confirm_1d_contiguous)
   121434    0.174    0.000    1.502    0.000 buffer.py:15(__init__)
   570373    0.159    0.000    0.401    0.000 abc.py:137(__instancecheck__)
     5122    0.142    0.000    0.142    0.000 {method 'item' of 'torch._C._TensorBase' objects}
   565844    0.121    0.000    0.121    0.000 column.py:124(__len__)
      724    0.116    0.000    1.845    0.003 column_accessor.py:16(__init__)
   121437    0.105    0.000    0.105    0.000 {built-in method _functools.reduce}
   122639    0.099    0.000    0.143    0.000 common.py:1733(pandas_dtype)
283571/283441    0.098    0.000    0.474    0.000 column.py:1537(as_column)
       65    0.092    0.001    0.110    0.002 {built-in method torch._C._from_dlpack}
       48    0.090    0.002    0.090    0.002 {built-in method addmm}
      149    0.087    0.001    0.087    0.001 {built-in method posix.stat}
       17    0.081    0.005    0.081    0.005 {method 'reshape' of 'torch._C._TensorBase' objects}
       68    0.068    0.001    0.294    0.004 frame.py:2183(_copy_struct_names)
       68    0.067    0.001    0.294    0.004 frame.py:2135(_copy_categories)
   121433    0.061    0.000    0.079    0.000 buffer.py:156(get_c_contiguity)
   283199    0.053    0.000    0.053    0.000 {built-in method builtins.iter}
   283154    0.049    0.000    0.083    0.000 {built-in method builtins.next}
   364532    0.047    0.000    0.048    0.000 _collections_abc.py:719(__iter__)
       12    0.041    0.003    0.065    0.005 init.py:271(_calculate_fan_in_and_fan_out)
       16    0.038    0.002    0.420    0.026 _tensor_str.py:74(__init__)
       48    0.037    0.001    0.037    0.001 {built-in method stack}
       16    0.035    0.002    0.035    0.002 {built-in method isfinite}
        4    0.033    0.008    0.033    0.008 {method 'read' of '_io.BufferedReader' objects}
       12    0.032    0.003    0.032    0.003 {built-in method _has_compatible_shallow_copy_type}
        2    0.031    0.016    0.031    0.016 {built-in method empty}
        1    0.031    0.031    0.031    0.031 {built-in method randperm}
   283373    0.030    0.000    0.030    0.000 {method 'values' of 'collections.OrderedDict' objects}
      374    0.029    0.000    0.223    0.001 column_accessor.py:105(columns)
       65    0.024    0.000    0.024    0.000 {pyarrow.lib.table}
     1025    0.024    0.000    0.024    0.000 {method 'tolist' of 'torch._C._TensorBase' objects}
       40    0.024    0.001    0.024    0.001 {method 'size' of 'torch._C._TensorBase' objects}
       64    0.022    0.000    0.022    0.000 column_accessor.py:241(<dictcomp>)
       48    0.022    0.000    0.022    0.000 {built-in method max_pool2d}
        1    0.022    0.022    0.022    0.022 {built-in method cupy.core.core.array}
      318    0.019    0.000    0.042    0.000 column_accessor.py:101(names)
        1    0.017    0.017    0.017    0.017 {built-in method torch._C._cuda_init}
       32    0.016    0.000    0.016    0.000 {method 'unbind' of 'torch._C._TensorBase' objects}
      136    0.015    0.000    0.022    0.000 scalar.py:298(_dispatch_scalar_binop)
       16    0.015    0.001    0.015    0.001 {method 'min' of 'torch._C._TensorBase' objects}
1047/1045    0.015    0.000    0.015    0.000 {built-in method numpy.array}
        2    0.015    0.007    0.015    0.007 {pandas._libs.algos.ensure_object}
       65    0.014    0.000    0.543    0.008 dataframe.py:2433(columns)
  778/260    0.014    0.000    0.092    0.000 base.py:293(__new__)
    20517    0.013    0.000    0.110    0.000 {method 'format' of 'str' objects}
       72    0.013    0.000    0.014    0.000 scalar.py:73(device_value)
       36    0.012    0.000    0.014    0.000 {cudf._lib.filling.sequence}
       16    0.012    0.001    0.012    0.001 {built-in method cat}
       96    0.012    0.000    0.012    0.000 {built-in method relu}
        1    0.011    0.011    0.011    0.011 {cudf._lib.sort.order_by}
       17    0.011    0.001   23.313    1.371 dataloader.py:473(_next_data)
        1    0.011    0.011    0.012    0.012 {built-in method cudf._lib.join.join}
     5120    0.011    0.000    0.096    0.000 tensor.py:528(__format__)
      261    0.011    0.000    0.012    0.000 {pandas._libs.lib.infer_dtype}
        3    0.010    0.003    0.160    0.053 conv.py:37(__init__)
       16    0.010    0.001    0.010    0.001 {method 'ne' of 'torch._C._TensorBase' objects}
       65    0.010    0.000    0.010    0.000 {pyarrow.lib.array}
        1    0.008    0.008    0.009    0.009 {method 'to_pandas' of 'pyarrow.lib._PandasConvertible' objects}
       16    0.007    0.000    0.056    0.003 _tensor_str.py:214(<listcomp>)
     1024    0.006    0.000    0.047    0.000 _tensor_str.py:163(_vector_str)
        3    0.006    0.002    0.006    0.002 {method 'read' of '_io.FileIO' objects}
  500/171    0.006    0.000   26.554    0.155 contextlib.py:71(inner)
       65    0.005    0.000    0.010    0.000 {cudf._lib.interop.from_arrow}
     5120    0.005    0.000    0.011    0.000 _tensor_str.py:137(format)
     5120    0.004    0.000    0.004    0.000 {method '__format__' of 'float' objects}
      136    0.004    0.000    0.006    0.000 {method '_to_host_scalar' of 'cudf._lib.scalar.DeviceScalar' objects}
    178/4    0.004    0.000    0.012    0.003 sre_parse.py:469(_parse)
    10358    0.004    0.000    0.006    0.000 generic.py:10(_check)
     7206    0.004    0.000    0.012    0.000 <frozen importlib._bootstrap>:1009(_handle_fromlist)
     10/1    0.003    0.000    0.336    0.336 module.py:357(_apply)
  994/860    0.003    0.000    0.633    0.001 dataframe.py:586(__setattr__)
      344    0.003    0.000    0.011    0.000 dtypes.py:298(to_cudf_compatible_scalar)
        2    0.003    0.002    0.003    0.002 {method 'random_' of 'torch._C._TensorBase' objects}
    16103    0.003    0.000    0.003    0.000 {built-in method builtins.getattr}
     3210    0.003    0.000    0.005    0.000 common.py:1600(_is_dtype_type)
     6432    0.003    0.000    0.003    0.000 {built-in method builtins.max}
     2499    0.003    0.000    0.004    0.000 base.py:413(find)
      777    0.003    0.000    0.019    0.000 common.py:218(asarray_tuplesafe)
  556/164    0.003    0.000    0.003    0.000 {built-in method _abc._abc_subclasscheck}
     2152    0.003    0.000    0.006    0.000 common.py:1460(is_extension_array_dtype)
     6264    0.002    0.000    0.002    0.000 {method 'dim' of 'torch._C._TensorBase' objects}
    241/4    0.002    0.000    0.005    0.001 sre_compile.py:71(_compile)
       36    0.002    0.000    0.033    0.001 column.py:2025(arange)
     2381    0.002    0.000    0.009    0.000 base.py:256(is_dtype)
       64    0.002    0.000    0.003    0.000 tensor.py:21(wrapped)
     5120    0.002    0.000    0.013    0.000 _tensor_str.py:173(_val_formatter)
     1039    0.002    0.000    0.002    0.000 {method 'extend' of 'list' objects}
     1024    0.002    0.000    0.015    0.000 _tensor_str.py:189(<listcomp>)
     1556    0.002    0.000    0.003    0.000 common.py:422(is_timedelta64_dtype)
       64    0.002    0.000    1.246    0.019 indexing.py:453(_get_column_selection)
      730    0.002    0.000    0.280    0.000 utils.py:273(__get__)
   160/16    0.002    0.000    6.077    0.380 module.py:715(_call_impl)
      454    0.002    0.000    0.003    0.000 dtypes.py:280(is_scalar)
        1    0.002    0.002   39.134   39.134 msms_profiler.py:139(main)
  1040/16    0.002    0.000    0.056    0.003 _tensor_str.py:198(_tensor_str_with_formatter)
     8289    0.002    0.000    0.002    0.000 {built-in method builtins.issubclass}
       96    0.001    0.000    0.001    0.000 {method 'view' of 'torch._C._TensorBase' objects}
       64    0.001    0.000    7.129    0.111 indexing.py:387(_getitem_tuple_arg)
     1594    0.001    0.000    0.005    0.000 common.py:530(is_categorical_dtype)
      583    0.001    0.000    0.006    0.000 common.py:1330(is_bool_dtype)
      133    0.001    0.000    0.658    0.005 dataframe.py:112(__init__)
      999    0.001    0.000    0.003    0.000 common.py:1565(_get_dtype)
     1387    0.001    0.000    0.001    0.000 column_accessor.py:44(__iter__)
   263/26    0.001    0.000    0.002    0.000 sre_parse.py:174(getwidth)
     1344    0.001    0.000    0.002    0.000 sre_parse.py:164(__getitem__)
      259    0.001    0.000    0.119    0.000 column_accessor.py:128(to_pandas_index)
       64    0.001    0.000    0.657    0.010 frame.py:497(_get_columns_by_index)
        2    0.001    0.001    0.001    0.001 {built-in method builtins.compile}
       16    0.001    0.000    6.077    0.380 msms.py:94(forward)
     1559    0.001    0.000    0.005    0.000 common.py:492(is_interval_dtype)
      788    0.001    0.000    0.003    0.000 base.py:5656(maybe_extract_name)
      781    0.001    0.000    0.004    0.000 dtypes.py:1119(is_dtype)
     1556    0.001    0.000    0.001    0.000 common.py:905(is_datetime64_any_dtype)
     1559    0.001    0.000    0.005    0.000 common.py:456(is_period_dtype)
       16    0.001    0.000    0.478    0.030 _tensor_str.py:277(_str_intern)
      872    0.001    0.000    0.001    0.000 sre_parse.py:233(__next)
       66    0.001    0.000    0.009    0.000 core.py:534(get_fs_token_paths)
     1207    0.001    0.000    0.001    0.000 column_accessor.py:58(__len__)
      259    0.001    0.000    0.014    0.000 base.py:5726(_maybe_cast_data_without_dtype)
      781    0.001    0.000    0.004    0.000 dtypes.py:906(is_dtype)
       68    0.001    0.000    5.916    0.087 frame.py:507(_gather)
      136    0.001    0.000    0.033    0.000 scalar.py:283(_scalar_binop)
       64    0.001    0.000    7.171    0.112 indexing.py:166(__getitem__)
     1645    0.001    0.000    0.001    0.000 common.py:188(<lambda>)
      265    0.001    0.000    0.001    0.000 _dtype.py:321(_name_get)
       67    0.001    0.000    0.002    0.000 index.py:1415(_from_table)
      205    0.001    0.000    0.001    0.000 {method 'astype' of 'numpy.generic' objects}
       65    0.001    0.000    0.035    0.001 column.py:345(from_arrow)
       99    0.001    0.000    0.036    0.000 dataframe.py:471(_from_table)
      552    0.001    0.000    0.002    0.000 common.py:566(is_string_dtype)
      202    0.001    0.000    0.016    0.000 index.py:1559(_data)
      260    0.001    0.000    0.001    0.000 base.py:463(_simple_new)
      848    0.001    0.000    0.001    0.000 _collections_abc.py:680(values)
      777    0.001    0.000    0.002    0.000 common.py:1296(is_float_dtype)
      232    0.001    0.000    0.001    0.000 index.py:1618(__len__)
        1    0.001    0.001    0.002    0.002 <frozen importlib._bootstrap_external>:105(_write_atomic)
     49/4    0.001    0.000    0.012    0.003 sre_parse.py:411(_parse_sub)
     1139    0.001    0.000    0.001    0.000 inference.py:322(is_hashable)
      208    0.001    0.000    0.001    0.000 column_accessor.py:120(_clear_cache)
        4    0.001    0.000    0.006    0.002 <frozen importlib._bootstrap_external>:914(get_data)
      161    0.001    0.000    0.001    0.000 module.py:781(__setattr__)
     3300    0.001    0.000    0.001    0.000 {method 'append' of 'list' objects}
     2173    0.001    0.000    0.001    0.000 {method 'join' of 'str' objects}
      344    0.001    0.000    0.008    0.000 scalar.py:15(__init__)
       69    0.001    0.000    0.066    0.001 dataframe.py:2483(index)
      538    0.001    0.000    0.001    0.000 _collections_abc.py:672(keys)
      330    0.001    0.000    0.001    0.000 column_accessor.py:72(level_names)
       58    0.001    0.000    0.001    0.000 sre_compile.py:276(_optimize_charset)
      519    0.001    0.000    0.002    0.000 common.py:750(is_signed_integer_dtype)
        3    0.001    0.000    2.820    0.940 linear.py:74(__init__)
        1    0.001    0.001    0.001    0.001 {method 'write' of '_io.FileIO' objects}
      500    0.001    0.000    0.001    0.000 nvtx.py:85(__exit__)
      400    0.001    0.000    0.002    0.000 common.py:696(is_integer_dtype)
       48    0.001    0.000    0.001    0.000 {method 't' of 'torch._C._TensorBase' objects}
       64    0.001    0.000    0.547    0.009 column_accessor.py:221(select_by_index)
      500    0.001    0.000    0.001    0.000 nvtx.py:81(__enter__)
        1    0.001    0.001    0.001    0.001 {built-in method posix.replace}
     1390    0.001    0.000    0.001    0.000 _collections_abc.py:698(__init__)
     1565    0.001    0.000    0.001    0.000 common.py:180(<lambda>)
      192    0.001    0.000    0.002    0.000 dataframe.py:566(shape)
      628    0.001    0.000    0.001    0.000 sre_parse.py:254(get)
       66    0.001    0.000    0.002    0.000 spec.py:46(__call__)
     1024    0.001    0.000    0.001    0.000 _tensor_str.py:191(<listcomp>)
      208    0.001    0.000    0.008    0.000 scalar.py:106(_preprocess_host_value)
      272    0.001    0.000    0.001    0.000 numeric.py:1816(isscalar)
      344    0.001    0.000    0.002    0.000 dtypes.py:152(is_string_dtype)
  782/780    0.001    0.000    0.015    0.000 _asarray.py:14(asarray)
      697    0.001    0.000    0.002    0.000 _collections_abc.py:701(__len__)
     1645    0.001    0.000    0.001    0.000 common.py:183(classes_and_not_datetimelike)
       48    0.001    0.000    0.001    0.000 {method 'double' of 'torch._C._TensorBase' objects}
      518    0.001    0.000    0.001    0.000 common.py:806(is_unsigned_integer_dtype)
      259    0.001    0.000    0.003    0.000 base.py:5672(_maybe_cast_with_dtype)
       66    0.001    0.000    0.001    0.000 posixpath.py:338(normpath)
     1024    0.001    0.000    0.001    0.000 _tensor_str.py:192(<listcomp>)
      553    0.001    0.000    0.001    0.000 {cudf._lib.scalar._is_null_host_scalar}
      214    0.001    0.000    0.019    0.000 re.py:273(_compile)
       98    0.001    0.000    0.001    0.000 posixpath.py:75(join)
    64/16    0.000    0.000    0.038    0.002 collate.py:42(default_collate)
      781    0.000    0.000    0.000    0.000 {built-in method builtins.setattr}
        2    0.000    0.000    0.000    0.000 {built-in method io.open}
      314    0.000    0.000    0.001    0.000 module.py:765(__getattr__)
        2    0.000    0.000    0.000    0.000 {built-in method marshal.loads}
      142    0.000    0.000    0.003    0.000 index.py:2697(as_index)
       33    0.000    0.000   19.339    0.586 csv.py:13(read_csv)
     1565    0.000    0.000    0.000    0.000 common.py:178(classes)
      192    0.000    0.000    0.000    0.000 {built-in method torch._C._get_tracing_state}
     1024    0.000    0.000    0.000    0.000 {built-in method math.floor}
      552    0.000    0.000    0.001    0.000 common.py:1541(_is_dtype)
      671    0.000    0.000    0.000    0.000 index.py:1510(name)
      259    0.000    0.000    0.001    0.000 column_accessor.py:88(name)
       16    0.000    0.000    0.000    0.000 {built-in method ceil}
       66    0.000    0.000    0.001    0.000 utils.py:265(tokenize)
      494    0.000    0.000    0.001    0.000 sre_parse.py:249(match)
       16    0.000    0.000    0.000    0.000 {method 'max' of 'torch._C._TensorBase' objects}
       33    0.000    0.000    0.007    0.000 ioutils.py:1043(ensure_single_filepath_or_buffer)
       66    0.000    0.000    0.004    0.000 local.py:157(make_path_posix)
      208    0.000    0.000    0.001    0.000 common.py:1223(is_numeric_dtype)
       48    0.000    0.000    0.091    0.002 functional.py:1669(linear)
       72    0.000    0.000    0.017    0.000 {cudf._lib.scalar.as_device_scalar}
       66    0.000    0.000    0.000    0.000 base.py:1032(__iter__)
       33    0.000    0.000    0.087    0.003 ioutils.py:1090(get_filepath_or_buffer)
      636    0.000    0.000    0.000    0.000 {built-in method builtins.min}
        1    0.000    0.000    0.000    0.000 {built-in method posix.open}
      265    0.000    0.000    0.001    0.000 index.py:1887(_values)
      148    0.000    0.000    0.001    0.000 index.py:2782(_setdefault_name)
       64    0.000    0.000    0.001    0.000 indexing.py:188(_can_downcast_to_series)
       36    0.000    0.000    0.479    0.013 {built-in method builtins.print}
      194    0.000    0.000    0.079    0.000 dataframe.py:2426(columns)
      437    0.000    0.000    0.000    0.000 sre_parse.py:160(__len__)
      475    0.000    0.000    0.000    0.000 dataframe.py:2477(index)
     1139    0.000    0.000    0.000    0.000 {built-in method builtins.hash}
      196    0.000    0.000    0.001    0.000 dataframe.py:868(__len__)
      151    0.000    0.000    0.000    0.000 {method 'match' of 're.Pattern' objects}
      272    0.000    0.000    0.006    0.000 scalar.py:81(value)
      363    0.000    0.000    0.000    0.000 sre_parse.py:172(append)
       16    0.000    0.000    0.000    0.000 {method 'abs' of 'torch._C._TensorBase' objects}
       16    0.000    0.000    0.476    0.030 _tensor_str.py:220(_tensor_str)
       66    0.000    0.000    0.000    0.000 {built-in method posix.getcwd}
       37    0.000    0.000    0.000    0.000 index.py:1487(__new__)
       66    0.000    0.000    0.002    0.000 posixpath.py:376(abspath)
      492    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x55d0142ec8e0}
  556/164    0.000    0.000    0.003    0.000 abc.py:141(__subclasscheck__)
       96    0.000    0.000    0.012    0.000 functional.py:1124(relu)
        1    0.000    0.000    0.000    0.000 {built-in method posix.mkdir}
       66    0.000    0.000    0.003    0.000 index.py:374(name)
       64    0.000    0.000    1.266    0.020 dataframe.py:6805(to_dlpack)
      264    0.000    0.000    0.000    0.000 utils.py:281(stringify_path)
      264    0.000    0.000    0.000    0.000 sre_parse.py:111(__init__)
       66    0.000    0.000    0.001    0.000 core.py:310(_un_chain)
        1    0.000    0.000    2.983    2.983 msms.py:54(__init__)
        1    0.000    0.000    0.000    0.000 {method '__exit__' of '_io._IOBase' objects}
        1    0.000    0.000    0.000    0.000 {cudf._lib.interop.to_arrow}
       68    0.000    0.000    0.589    0.009 frame.py:2208(_postprocess_columns)
       56    0.000    0.000    0.000    0.000 sre_parse.py:408(_uniq)
        5    0.000    0.000    0.000    0.000 {built-in method builtins.__build_class__}
      262    0.000    0.000    0.002    0.000 index.py:1926(__len__)
       66    0.000    0.000    0.001    0.000 registry.py:182(get_filesystem_class)
        1    0.000    0.000    5.834    5.834 msms.py:23(__init__)
       65    0.000    0.000    0.004    0.000 index.py:354(names)
       65    0.000    0.000    1.286    0.020 dlpack.py:41(to_dlpack)
       66    0.000    0.000    0.000    0.000 {method 'hexdigest' of '_hashlib.HASH' objects}
      263    0.000    0.000    0.000    0.000 base.py:544(_reset_identity)
       56    0.000    0.000    0.000    0.000 grad_mode.py:80(__init__)
      215    0.000    0.000    0.000    0.000 sre_parse.py:286(tell)
      412    0.000    0.000    0.000    0.000 common.py:595(condition)
       32    0.000    0.000    0.016    0.001 tensor.py:576(__iter__)
       19    0.000    0.000    0.000    0.000 __init__.py:381(__getitem__)
       16    0.000    0.000    0.000    0.000 {method 'unsqueeze' of 'torch._C._TensorBase' objects}
      136    0.000    0.000    0.006    0.000 scalar.py:103(_device_value_to_host)
       66    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha256}
       48    0.000    0.000    0.092    0.002 linear.py:92(forward)
      112    0.000    0.000    0.000    0.000 grad_mode.py:166(__init__)
     1024    0.000    0.000    0.000    0.000 _tensor_str.py:134(width)
      715    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'get' of 'cupy.core.core.ndarray' objects}
       48    0.000    0.000    5.935    0.124 conv.py:414(_conv_forward)
        9    0.000    0.000    0.000    0.000 driver.py:298(safe_cuda_api_call)
       80    0.000    0.000    0.001    0.000 index.py:367(name)
      312    0.000    0.000    0.000    0.000 overrides.py:1084(<genexpr>)
      500    0.000    0.000    0.000    0.000 {nvtx._lib.lib.push_range}
      132    0.000    0.000    0.000    0.000 posixpath.py:232(expanduser)
        1    0.000    0.000    0.001    0.001 column.py:297(to_arrow)
      108    0.000    0.000    0.001    0.000 overrides.py:1070(has_torch_function)
      136    0.000    0.000    0.000    0.000 column_accessor.py:79(nlevels)
       66    0.000    0.000    0.004    0.000 local.py:142(_strip_protocol)
      265    0.000    0.000    0.000    0.000 _dtype.py:24(_kind_name)
       70    0.000    0.000    0.001    0.000 column_accessor.py:246(set_by_label)
       10    0.000    0.000    0.000    0.000 _collections_abc.py:72(_check_methods)
       66    0.000    0.000    0.001    0.000 column_accessor.py:54(__delitem__)
    69/66    0.000    0.000    0.018    0.000 __init__.py:140(_lazy_init)
      600    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
       66    0.000    0.000    0.000    0.000 utils.py:93(update_storage_options)
       99    0.000    0.000    0.002    0.000 genericpath.py:27(isfile)
       48    0.000    0.000    0.022    0.000 pooling.py:152(forward)
      266    0.000    0.000    0.000    0.000 {pandas._libs.lib.is_scalar}
       58    0.000    0.000    0.000    0.000 sre_compile.py:249(_compile_charset)
       56    0.000    0.000    0.000    0.000 grad_mode.py:85(__enter__)
      227    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}
      265    0.000    0.000    0.000    0.000 _dtype.py:307(_name_includes_bit_suffix)
        3    0.000    0.000    0.017    0.006 series.py:201(__init__)
       16    0.000    0.000    0.479    0.030 tensor.py:173(__repr__)
       12    0.000    0.000    0.000    0.000 tensor.py:933(grad)
       10    0.000    0.000    0.001    0.000 module.py:223(__init__)
       16    0.000    0.000   23.232    1.452 fetch.py:44(<listcomp>)
       18    0.000    0.000    0.017    0.001 tokenize.py:487(_tokenize)
      9/8    0.000    0.000    0.002    0.000 driver.py:271(__getattr__)
       32    0.000    0.000    0.000    0.000 msms.py:121(<listcomp>)
       64    0.000    0.000    0.000    0.000 dataframe.py:2329(iloc)
      132    0.000    0.000    0.001    0.000 re.py:172(match)
       48    0.000    0.000    5.935    0.124 conv.py:422(forward)
        1    0.000    0.000    0.131    0.131 indexing.py:17(indices_from_labels)
       34    0.000    0.000    0.012    0.000 index.py:1550(_values)
      160    0.000    0.000    0.000    0.000 {built-in method builtins.any}
      136    0.000    0.000    0.000    0.000 scalar.py:164(__bool__)
       16    0.000    0.000    0.478    0.030 _tensor_str.py:370(_str)
        6    0.000    0.000    2.968    0.495 init.py:352(kaiming_uniform_)
       65    0.000    0.000    0.000    0.000 base.py:1213(_get_names)
      500    0.000    0.000    0.000    0.000 {nvtx._lib.lib.pop_range}
        8    0.000    0.000    0.001    0.000 series.py:107(__init__)
       48    0.000    0.000    0.022    0.000 _jit_internal.py:257(fn)
        1    0.000    0.000    0.001    0.001 driver.py:461(__init__)
       56    0.000    0.000    0.000    0.000 grad_mode.py:89(__exit__)
      224    0.000    0.000    0.000    0.000 {method 'find' of 'bytearray' objects}
       33    0.000    0.000    0.000    0.000 enum.py:356(__getitem__)
       70    0.000    0.000    0.000    0.000 __init__.py:107(is_initialized)
        1    0.000    0.000    0.000    0.000 {pandas._libs.lib.maybe_convert_objects}
       16    0.000    0.000   23.270    1.454 fetch.py:42(fetch)
       12    0.000    0.000    0.000    0.000 {built-in method _make_subclass}
       66    0.000    0.000    0.001    0.000 _collections_abc.py:790(pop)
      164    0.000    0.000    0.000    0.000 posixpath.py:41(_get_sep)
        9    0.000    0.000    0.001    0.000 column.py:994(astype)
       68    0.000    0.000    0.026    0.000 scalar.py:213(__lt__)
       70    0.000    0.000    0.001    0.000 column_accessor.py:50(__setitem__)
      136    0.000    0.000    0.000    0.000 scalar.py:252(_binop_result_dtype_or_error)
        2    0.000    0.000    0.035    0.018 column.py:127(to_pandas)
       67    0.000    0.000    0.001    0.000 dtypes.py:346(is_list_like)
       65    0.000    0.000    0.018    0.000 __init__.py:127(init)
      500    0.000    0.000    0.000    0.000 contextlib.py:58(_recreate_cm)
       33    0.000    0.000    0.031    0.001 sampler.py:113(__iter__)
       74    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
      272    0.000    0.000    0.000    0.000 scalar.py:65(_is_host_value_current)
       48    0.000    0.000    0.022    0.000 functional.py:574(_max_pool2d)
        3    0.000    0.000    0.149    0.050 conv.py:85(reset_parameters)
        1    0.000    0.000    0.000    0.000 dataloader.py:154(__init__)
       32    0.000    0.000    0.000    0.000 dtypes.py:281(construct_from_string)
      438    0.000    0.000    0.000    0.000 {built-in method posix.fspath}
       12    0.000    0.000    0.000    0.000 module.py:294(register_parameter)
       86    0.000    0.000    0.000    0.000 {built-in method builtins.all}
      352    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
        1    0.000    0.000    0.000    0.000 {method 'reduce' of 'numpy.ufunc' objects}
       65    0.000    0.000    0.000    0.000 sre_compile.py:423(_simple)
        1    0.000    0.000    0.000    0.000 {built-in method pickle5._pickle.load}
       64    0.000    0.000    0.000    0.000 {method 'indices' of 'slice' objects}
       16    0.000    0.000    0.000    0.000 _tensor_str.py:244(_add_suffixes)
       32    0.000    0.000    0.000    0.000 container.py:184(__iter__)
       17    0.000    0.000   23.313    1.371 dataloader.py:432(__next__)
       10    0.000    0.000    0.000    0.000 functools.py:37(update_wrapper)
        3    0.000    0.000    0.016    0.005 construction.py:390(sanitize_array)
        1    0.000    0.000    0.155    0.155 indexing.py:131(_loc_to_iloc)
      131    0.000    0.000    0.000    0.000 base.py:567(__len__)
        5    0.000    0.000    0.002    0.000 frame.py:477(_get_columns_by_label)
       16    0.000    0.000    0.037    0.002 collate.py:83(<listcomp>)
      168    0.000    0.000    0.000    0.000 {built-in method torch._C.is_grad_enabled}
       66    0.000    0.000    0.000    0.000 {built-in method torch._C._cuda_isInBadFork}
       82    0.000    0.000    0.018    0.000 re.py:234(compile)
       56    0.000    0.000    0.000    0.000 {built-in method fromkeys}
       33    0.000    0.000    0.084    0.003 genericpath.py:16(exists)
       42    0.000    0.000    0.000    0.000 numerictypes.py:286(issubclass_)
       66    0.000    0.000    0.000    0.000 posixpath.py:64(isabs)
       24    0.000    0.000    0.000    0.000 sre_parse.py:343(_escape)
       17    0.000    0.000    0.031    0.002 sampler.py:225(__iter__)
        3    0.000    0.000    0.011    0.004 <frozen importlib._bootstrap_external>:793(get_code)
        3    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:1356(find_spec)
      248    0.000    0.000    0.000    0.000 _jit_internal.py:750(is_scripting)
        1    0.000    0.000    0.066    0.066 dataframe.py:3669(sort_values)
        9    0.000    0.000    0.000    0.000 sre_compile.py:413(<listcomp>)
       66    0.000    0.000    0.000    0.000 core.py:479(split_protocol)
        1    0.000    0.000    0.104    0.104 dataloader.py:401(__init__)
       21    0.000    0.000    0.000    0.000 numerictypes.py:360(issubdtype)
       72    0.000    0.000    0.000    0.000 column_accessor.py:314(_pad_key)
       68    0.000    0.000    0.007    0.000 scalar.py:216(__ge__)
        1    0.000    0.000    0.000    0.000 join.py:443(compute_output_dtypes)
      192    0.000    0.000    0.000    0.000 tensor.py:24(<genexpr>)
        3    0.000    0.000    0.000    0.000 range.py:86(__new__)
    19/18    0.000    0.000    0.000    0.000 dataloader.py:329(__setattr__)
       10    0.000    0.000    0.000    0.000 driver.py:297(_wrap_api_call)
       64    0.000    0.000    0.000    0.000 indexing.py:384(__init__)
        1    0.000    0.000    0.000    0.000 {built-in method posix.listdir}
       67    0.000    0.000    0.000    0.000 registry.py:37(__contains__)
        6    0.000    0.000    0.000    0.000 init.py:67(calculate_gain)
       65    0.000    0.000    0.000    0.000 index.py:347(names)
       98    0.000    0.000    0.000    0.000 _collections_abc.py:302(__subclasshook__)
        5    0.000    0.000    0.018    0.004 dataframe.py:616(__getitem__)
        1    0.000    0.000    0.000    0.000 tokenize.py:238(untokenize)
        3    0.000    0.000    0.015    0.005 cast.py:1310(maybe_cast_to_datetime)
        9    0.000    0.000    0.000    0.000 sre_compile.py:411(_mk_bitmap)
        4    0.000    0.000    0.018    0.004 sre_compile.py:759(compile)
       14    0.000    0.000    0.000    0.000 {pandas._libs.lib.is_list_like}
       33    0.000    0.000    0.000    0.000 ioutils.py:1039(_is_local_filesystem)
       66    0.000    0.000    0.000    0.000 spec.py:145(_fs_token)
       11    0.000    0.000    0.000    0.000 {built-in method torch._C._log_api_usage_once}
      4/3    0.000    0.000    0.013    0.004 <frozen importlib._bootstrap>:978(_find_and_load)
        2    0.000    0.000    0.001    0.000 dataframe.py:420(_init_from_dict_like)
        1    0.000    0.000    0.000    0.000 join.py:299(typecast_input_to_libcudf)
       22    0.000    0.000    0.000    0.000 sre_parse.py:84(opengroup)
      195    0.000    0.000    0.000    0.000 base.py:3870(_values)
       15    0.000    0.000    0.001    0.000 utils.py:8(parse)
       19    0.000    0.000    0.000    0.000 __init__.py:374(__getattr__)
        3    0.000    0.000    0.000    0.000 blocks.py:2655(get_block_type)
        1    0.000    0.000    0.000    0.000 driver.py:248(_initialize_extras)
        1    0.000    0.000    0.169    0.169 series.py:915(__getitem__)
       12    0.000    0.000    0.032    0.003 module.py:361(compute_should_use_set_data)
        4    0.000    0.000    0.000    0.000 sre_compile.py:536(_compile_info)
        1    0.000    0.000    0.003    0.003 column.py:82(data_array_view)
        1    0.000    0.000    0.000    0.000 __init__.py:1304(_clear_cache)
       37    0.000    0.000    0.000    0.000 index.py:1682(dtype)
        2    0.000    0.000    2.982    1.491 container.py:217(extend)
       70    0.000    0.000    0.000    0.000 {method 'numel' of 'torch._C._TensorBase' objects}
       66    0.000    0.000    0.000    0.000 sre_parse.py:168(__setitem__)
       10    0.000    0.000    0.000    0.000 driver.py:305(_find_api)
        3    0.000    0.000    0.015    0.005 cast.py:1201(maybe_infer_to_datetimelike)
        2    0.000    0.000    0.001    0.001 driver.py:387(__enter__)
       48    0.000    0.000    0.000    0.000 functional.py:1686(<listcomp>)
        3    0.000    0.000    0.161    0.054 conv.py:394(__init__)
        3    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap>:882(_find_spec)
        5    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:157(_get_module_lock)
       20    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:56(_path_join)
        1    0.000    0.000    0.018    0.018 format.py:523(_filter_header)
      112    0.000    0.000    0.000    0.000 {built-in method torch._C._set_grad_enabled}
        6    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:271(cache_from_source)
        5    0.000    0.000    0.000    0.000 generic.py:5141(__setattr__)
        1    0.000    0.000    0.000    0.000 driver.py:54(make_logger)
        2    0.000    0.000    0.000    0.000 devicearray.py:65(__init__)
        1    0.000    0.000    0.001    0.001 devices.py:144(_get_or_create_context_uncached)
        8    0.000    0.000    0.000    0.000 column.py:506(copy)
        1    0.000    0.000    0.000    0.000 join.py:498(typecast_libcudf_to_output)
        3    0.000    0.000    0.062    0.021 column.py:825(take)
       19    0.000    0.000    0.000    0.000 module.py:1175(named_children)
       32    0.000    0.000    0.000    0.000 {built-in method torch._C.get_default_dtype}
        4    0.000    0.000    0.000    0.000 string.py:4654(__init__)
        6    0.000    0.000    0.000    0.000 frame.py:202(__len__)
        6    0.000    0.000    0.000    0.000 init.py:12(_no_grad_uniform_)
        1    0.000    0.000    0.000    0.000 {built-in method marshal.dumps}
        1    0.000    0.000    0.018    0.018 format.py:558(_read_array_header)
        3    0.000    0.000    0.000    0.000 blocks.py:2701(make_block)
        1    0.000    0.000    0.000    0.000 api.py:26(from_cuda_array_interface)
        4    0.000    0.000    0.161    0.040 msms.py:86(<genexpr>)
       52    0.000    0.000    0.000    0.000 sre_parse.py:81(groups)
        1    0.000    0.000    0.052    0.052 npyio.py:283(load)
        3    0.000    0.000    0.000    0.000 index.py:1866(_initialize)
        3    0.000    0.000    2.819    0.940 linear.py:85(reset_parameters)
        1    0.000    0.000    0.000    0.000 {method 'write' of '_io.TextIOWrapper' objects}
       20    0.000    0.000    0.000    0.000 {method 'rfind' of 'str' objects}
        2    0.000    0.000    0.000    0.000 dummyarray.py:159(__init__)
       14    0.000    0.000    0.000    0.000 series.py:214(_column)
       22    0.000    0.000    0.002    0.000 sre_parse.py:96(closegroup)
        3    0.000    0.000    0.000    0.000 base.py:5650(default_index)
        1    0.000    0.000    0.000    0.000 __init__.py:59(_check_capability)
        1    0.000    0.000    0.001    0.001 join.py:194(validate_merge_cfg)
        4    0.000    0.000    0.000    0.000 {built-in method _sre.compile}
        5    0.000    0.000    0.000    0.000 column_accessor.py:198(select_by_label)
       65    0.000    0.000    0.000    0.000 dataframe.py:512(_constructor)
       18    0.000    0.000    0.000    0.000 series.py:366(name)
       99    0.000    0.000    0.000    0.000 {built-in method _stat.S_ISREG}
      108    0.000    0.000    0.000    0.000 {built-in method torch._C._is_torch_function_enabled}
        4    0.000    0.000    0.000    0.000 column.py:76(as_frame)
       20    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:58(<listcomp>)
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:504(_init_module_attrs)
        3    0.000    0.000    0.000    0.000 generic.py:195(__init__)
        3    0.000    0.000    0.000    0.000 range.py:134(_simple_new)
        3    0.000    0.000    0.001    0.000 index.py:2058(__new__)
        6    0.000    0.000    0.064    0.011 init.py:342(_calculate_correct_fan)
        2    0.000    0.000    0.000    0.000 {built-in method numpy.empty}
       67    0.000    0.000    0.000    0.000 {built-in method posix.getpid}
      105    0.000    0.000    0.000    0.000 _collections_abc.py:392(__subclasshook__)
        4    0.000    0.000    0.012    0.003 sre_parse.py:913(parse)
        1    0.000    0.000    0.030    0.030 join.py:101(perform_merge)
        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:438(_classify_pyc)
        2    0.000    0.000    0.000    0.000 cast.py:1187(maybe_castable)
        4    0.000    0.000    0.000    0.000 column_accessor.py:266(_select_by_label_grouped)
        3    0.000    0.000    0.062    0.021 column.py:591(__getitem__)
        1    0.000    0.000    0.000    0.000 join.py:2(<module>)
      102    0.000    0.000    0.000    0.000 {method 'endswith' of 'str' objects}
        5    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:78(acquire)
        4    0.000    0.000    0.000    0.000 typing.py:814(__new__)
        3    0.000    0.000    0.000    0.000 blocks.py:124(__init__)
       65    0.000    0.000    0.000    0.000 base.py:1175(name)
       19    0.000    0.000    0.000    0.000 module.py:1166(children)
        4    0.000    0.000    0.000    0.000 enum.py:841(__and__)
        1    0.000    0.000    0.000    0.000 linecache.py:82(updatecache)
        2    0.000    0.000    0.002    0.001 devices.py:110(ensure_context)
        2    0.000    0.000    0.000    0.000 column_accessor.py:182(copy)
       66    0.000    0.000    0.000    0.000 registry.py:25(__getitem__)
        1    0.000    0.000    0.000    0.000 join.py:128(preprocess_merge_params)
       16    0.000    0.000    0.000    0.000 {built-in method torch._C._get_default_device}
        1    0.000    0.000    0.000    0.000 tokenize.py:443(open)
       10    0.000    0.000    0.000    0.000 __init__.py:1614(isEnabledFor)
        1    0.000    0.000    0.001    0.001 driver.py:231(initialize)
        1    0.000    0.000    0.001    0.001 driver.py:339(get_device)
        2    0.000    0.000    0.000    0.000 dataframe.py:2964(insert)
        3    0.000    0.000    0.000    0.000 frame.py:533(_as_column)
      7/1    0.000    0.000    0.000    0.000 ast.py:64(_convert)
        1    0.000    0.000    0.000    0.000 driver.py:1015(__init__)
        1    0.000    0.000    0.000    0.000 {method 'readlines' of '_io._IOBase' objects}
        3    0.000    0.000    0.000    0.000 {built-in method torch.cuda._get_device_properties}
      3/2    0.000    0.000    0.013    0.007 <frozen importlib._bootstrap>:948(_find_and_load_unlocked)
        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1190(_path_hooks)
        3    0.000    0.000    0.000    0.000 blocks.py:237(mgr_locs)
        4    0.000    0.000    0.000    0.000 series.py:398(_set_axis)
       66    0.000    0.000    0.000    0.000 spec.py:48(<genexpr>)
        1    0.000    0.000    0.169    0.169 indexing.py:116(__getitem__)
      3/2    0.000    0.000    0.012    0.006 <frozen importlib._bootstrap>:663(_load_unlocked)
        3    0.000    0.000    0.001    0.000 managers.py:1564(from_array)
        4    0.000    0.000    0.000    0.000 dummyarray.py:109(compute_index)
        2    0.000    0.000    0.000    0.000 column_accessor.py:145(insert)
        6    0.000    0.000    0.000    0.000 module.py:333(add_module)
       66    0.000    0.000    0.000    0.000 {method 'encode' of 'str' objects}
        1    0.000    0.000    0.040    0.040 frame.py:3173(_merge)
        3    0.000    0.000    0.000    0.000 __init__.py:295(get_device_properties)
       12    0.000    0.000    0.000    0.000 parameter.py:23(__new__)
        1    0.000    0.000    0.003    0.003 devices.py:221(_require_cuda_context)
        2    0.000    0.000    0.000    0.000 devicearray.py:118(__cuda_array_interface__)
        2    0.000    0.000    0.000    0.000 construction.py:520(_try_cast)
        6    0.000    0.000    0.000    0.000 series.py:442(name)
       66    0.000    0.000    0.000    0.000 spec.py:180(_get_kwargs_from_urls)
        2    0.000    0.000    0.001    0.001 dataframe.py:2935(copy)
      3/2    0.000    0.000    0.012    0.006 <frozen importlib._bootstrap_external>:722(exec_module)
        1    0.000    0.000    0.000    0.000 __init__.py:1216(getLogger)
        2    0.000    0.000    0.000    0.000 dummyarray.py:149(from_desc)
        2    0.000    0.000    0.000    0.000 dummyarray.py:169(_compute_layout)
        2    0.000    0.000    0.000    0.000 dummyarray.py:193(_compute_extent)
        1    0.000    0.000    0.000    0.000 {cudf._lib.join.compute_result_col_names}
        1    0.000    0.000    0.062    0.062 series.py:2240(argsort)
       73    0.000    0.000    0.000    0.000 {method 'pop' of 'dict' objects}
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:574(spec_from_file_location)
       16    0.000    0.000    0.000    0.000 tokenize.py:225(add_whitespace)
        1    0.000    0.000    0.000    0.000 __init__.py:1267(_fixupParents)
       10    0.000    0.000    0.000    0.000 common.py:194(is_object_dtype)
        1    0.000    0.000    0.000    0.000 numpy_.py:162(__init__)
        3    0.000    0.000    0.000    0.000 utils.py:20(_reverse_repeat_tuple)
        1    0.000    0.000    0.000    0.000 sampler.py:87(__init__)
        5    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:103(release)
        9    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:84(_path_is_mode_type)
        3    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:1240(_get_spec)
        1    0.000    0.000    0.000    0.000 warnings.py:35(_formatwarnmsg_impl)
       22    0.000    0.000    0.000    0.000 sre_compile.py:65(_combine_flags)
        2    0.000    0.000    0.000    0.000 _dtype.py:34(__str__)
        5    0.000    0.000    0.000    0.000 generic.py:5123(__getattr__)
        1    0.000    0.000    0.000    0.000 numeric.py:50(__new__)
        9    0.000    0.000    0.000    0.000 numerical.py:175(as_numerical_column)
        1    0.000    0.000    0.036    0.036 series.py:2062(to_pandas)
        4    0.000    0.000    2.820    0.705 msms.py:89(<genexpr>)
       13    0.000    0.000    0.000    0.000 sre_parse.py:295(_class_escape)
        2    0.000    0.000    0.000    0.000 __init__.py:73(CFUNCTYPE)
        1    0.000    0.000    0.000    0.000 driver.py:524(get_primary_context)
        2    0.000    0.000    0.000    0.000 {pandas._libs.lib.infer_datetimelike_array}
        1    0.000    0.000    0.000    0.000 column_accessor.py:259(_select_by_label_list_like)
        3    0.000    0.000    0.000    0.000 series.py:395(_copy_construct)
       17    0.000    0.000    0.031    0.002 dataloader.py:426(_next_index)
        1    0.000    0.000    0.104    0.104 dataloader.py:465(__init__)
       16    0.000    0.000    0.017    0.001 tokenize.py:147(_compile)
        1    0.000    0.000    0.011    0.011 frame.py:2527(_get_sorted_inds)
        1    0.000    0.000    0.000    0.000 index.py:1574(copy)
        1    0.000    0.000    0.000    0.000 series.py:1784(null_count)
        1    0.000    0.000    0.000    0.000 __init__.py:85(_check_cubins)
       12    0.000    0.000    0.301    0.025 module.py:463(<lambda>)
        5    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:58(__init__)
        2    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:523(_compile_bytecode)
       16    0.000    0.000    0.000    0.000 types.py:164(__get__)
        1    0.000    0.000    0.000    0.000 contextlib.py:481(__exit__)
        4    0.000    0.000    0.005    0.001 sre_compile.py:598(_code)
        1    0.000    0.000    0.014    0.014 indexing.py:72(__getitem__)
        1    0.000    0.000    0.000    0.000 __init__.py:96(<listcomp>)
       15    0.000    0.000    0.000    0.000 module.py:782(remove_from)
        2    0.000    0.000    2.982    1.491 container.py:145(__init__)
        1    0.000    0.000    0.000    0.000 pooling.py:17(__init__)
       32    0.000    0.000    0.000    0.000 collate.py:80(<genexpr>)
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1203(_path_importer_cache)
        4    0.000    0.000    0.000    0.000 _collections_abc.py:664(__contains__)
       10    0.000    0.000    0.000    0.000 functools.py:67(wraps)
        1    0.000    0.000    0.000    0.000 numeric.py:268(full)
        1    0.000    0.000    0.000    0.000 cast.py:88(maybe_convert_platform)
        1    0.000    0.000    0.000    0.000 cast.py:1570(construct_1d_object_array_from_listlike)
        1    0.000    0.000    0.004    0.004 dataframe.py:2897(take)
        1    0.000    0.000    0.041    0.041 dataframe.py:3973(merge)
        6    0.000    0.000    0.000    0.000 init.py:109(uniform_)
       48    0.000    0.000    0.000    0.000 worker.py:83(get_worker_info)
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:576(module_from_spec)
       16    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:74(_path_stat)
        8    0.000    0.000    0.000    0.000 enum.py:289(__call__)
        2    0.000    0.000    0.000    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
        6    0.000    0.000    0.000    0.000 __init__.py:221(_releaseLock)
        3    0.000    0.000    0.000    0.000 common.py:224(is_sparse)
        1    0.000    0.000    0.000    0.000 index.py:1891(copy)
        3    0.000    0.000    0.000    0.000 _utils.py:8(_get_device_index)
        1    0.000    0.000    0.001    0.001 join.py:15(__init__)
       24    0.000    0.000    0.000    0.000 {method 'rpartition' of 'str' objects}
       32    0.000    0.000    0.000    0.000 {method 'has_names' of 'torch._C._TensorBase' objects}
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:318(__exit__)
        3    0.000    0.000    0.000    0.000 managers.py:1532(__init__)
        2    0.000    0.000    0.000    0.000 devicearray.py:714(is_contiguous)
        3    0.000    0.000    0.000    0.000 inference.py:263(is_dict_like)
        6    0.000    0.000    0.000    0.000 common.py:150(ensure_python_int)
        1    0.000    0.000    0.041    0.041 dataframe.py:4097(join)
       37    0.000    0.000    0.000    0.000 index.py:91(__init__)
        3    0.000    0.000    0.000    0.000 series.py:392(_copy_construct_defaults)
        1    0.000    0.000    0.000    0.000 msms.py:31(<listcomp>)
       15    0.000    0.000    0.000    0.000 utils.py:26(<genexpr>)
       16    0.000    0.000    0.000    0.000 enum.py:633(value)
        3    0.000    0.000    0.000    0.000 frame.py:40(_from_table)
        1    0.000    0.000    0.026    0.026 index.py:582(to_pandas)
        1    0.000    0.000    0.000    0.000 series.py:2142(loc)
        6    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:51(_r_long)
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1351(_get_spec)
        1    0.000    0.000    0.000    0.000 fromnumeric.py:70(_wrapreduction)
        1    0.000    0.000    0.018    0.018 format.py:683(read_array)
        6    0.000    0.000    0.000    0.000 __init__.py:212(_acquireLock)
        9    0.000    0.000    0.000    0.000 __init__.py:1356(debug)
        4    0.000    0.000    0.000    0.000 string.py:4784(set_base_children)
        1    0.000    0.000    0.003    0.003 index.py:1621(__getitem__)
        6    0.000    0.000    0.000    0.000 __init__.py:46(is_available)
        5    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:176(cb)
       30    0.000    0.000    0.000    0.000 {built-in method math.sqrt}
        8    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:62(_path_split)
        1    0.000    0.000    0.000    0.000 driver.py:346(get_device_count)
        3    0.000    0.000    0.000    0.000 common.py:190(all_none)
        3    0.000    0.000    0.000    0.000 base.py:1182(name)
        2    0.000    0.000    0.000    0.000 column_accessor.py:94(nrows)
        1    0.000    0.000    0.061    0.061 column.py:983(sort_by_values)
        1    0.000    0.000    0.000    0.000 dataloader.py:45(create_fetcher)
       17    0.000    0.000    0.000    0.000 {method 'clear' of 'dict' objects}
       18    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:222(_verbose_message)
        1    0.000    0.000    0.003    0.003 <frozen importlib._bootstrap_external>:961(set_data)
        4    0.000    0.000    0.000    0.000 sre_parse.py:224(__init__)
        1    0.000    0.000    0.000    0.000 driver.py:1562(__init__)
       11    0.000    0.000    0.000    0.000 inference.py:289(<genexpr>)
        2    0.000    0.000    0.000    0.000 dataframe.py:483(_align_input_series_indices)
        1    0.000    0.000    0.061    0.061 series.py:2343(_sort)
        2    0.000    0.000    0.000    0.000 __init__.py:278(get_device_capability)
        1    0.000    0.000    0.000    0.000 msms.py:1(<module>)
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:369(_get_cached)
        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1404(_fill_cache)
        7    0.000    0.000    0.000    0.000 _collections_abc.py:742(__iter__)
        1    0.000    0.000    0.000    0.000 __init__.py:1928(getLogger)
        4    0.000    0.000    0.000    0.000 managers.py:1613(internal_values)
        1    0.000    0.000    0.022    0.022 from_data.py:44(asarray)
        1    0.000    0.000    0.000    0.000 registry.py:212(_import_class)
        1    0.000    0.000    0.000    0.000 {method 'manual_seed' of 'torch._C.Generator' objects}
        5    0.000    0.000    0.000    0.000 __init__.py:338(device_count)
        2    0.000    0.000    0.000    0.000 {method 'readline' of '_io.BufferedReader' objects}
        4    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:147(__enter__)
        8    0.000    0.000    0.000    0.000 enum.py:531(__new__)
        1    0.000    0.000    0.000    0.000 __init__.py:1336(__init__)
        4    0.000    0.000    0.000    0.000 managers.py:1602(dtype)
        1    0.000    0.000    0.000    0.000 driver.py:2174(get_devptr_for_active_ctx)
        3    0.000    0.000    0.000    0.000 common.py:381(is_datetime64tz_dtype)
        1    0.000    0.000    0.000    0.000 {method 'chunk' of 'pyarrow.lib.ChunkedArray' objects}
        1    0.000    0.000    0.000    0.000 spec.py:104(__init__)
        1    0.000    0.000    0.000    0.000 fetch.py:39(__init__)
       30    0.000    0.000    0.000    0.000 {method 'items' of 'collections.OrderedDict' objects}
       11    0.000    0.000    0.000    0.000 {built-in method torch._C._cuda_getDeviceCount}
        6    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:403(cached)
        5    0.000    0.000    0.000    0.000 _collections_abc.py:252(__subclasshook__)
        1    0.000    0.000    0.000    0.000 <__array_function__ internals>:2(all)
        2    0.000    0.000    0.000    0.000 blocks.py:2374(__init__)
        9    0.000    0.000    0.000    0.000 driver.py:326(_check_error)
        1    0.000    0.000    0.000    0.000 __init__.py:766(asnumpy)
        3    0.000    0.000    0.000    0.000 construction.py:339(extract_array)
        3    0.000    0.000    0.000    0.000 construction.py:580(is_empty_data)
        1    0.000    0.000    0.025    0.025 column.py:152(values)
        1    0.000    0.000    0.000    0.000 join.py:454(<dictcomp>)
       19    0.000    0.000    0.000    0.000 {built-in method _imp.acquire_lock}
       46    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1319(__init__)
        3    0.000    0.000    0.000    0.000 sre_compile.py:461(_get_literal_prefix)
        4    0.000    0.000    0.000    0.000 sre_parse.py:897(fix_flags)
        3    0.000    0.000    0.000    0.000 format.py:877(_read_bytes)
        1    0.000    0.000    0.000    0.000 driver.py:2254(memory_size_from_info)
        1    0.000    0.000    0.001    0.001 devices.py:36(__getitem__)
        1    0.000    0.000    0.003    0.003 api.py:56(as_cuda_array)
        1    0.000    0.000    0.000    0.000 api.py:214(_fill_stride_by_order)
        1    0.000    0.000    0.000    0.000 syncdetect.py:23(_is_allowed)
        1    0.000    0.000    0.000    0.000 base.py:743(to_numpy)
        7    0.000    0.000    0.000    0.000 range.py:687(__len__)
        4    0.000    0.000    0.000    0.000 series.py:492(name)
        1    0.000    0.000    0.000    0.000 series.py:750(__array__)
        1    0.000    0.000    0.000    0.000 series.py:2153(iloc)
        2    0.000    0.000    0.000    0.000 join.py:527(_build_output_col)
        6    0.000    0.000    0.000    0.000 {method 'acquire' of '_thread.RLock' objects}
        4    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:151(__exit__)
      4/3    0.000    0.000    0.003    0.001 <frozen importlib._bootstrap>:211(_call_with_frames_removed)
       12    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:321(<genexpr>)
        9    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:859(__exit__)
        6    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:93(_path_isfile)
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:401(_check_name_wrapper)
        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:471(_validate_timestamp_pyc)
        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:536(_code_to_timestamp_pyc)
        8    0.000    0.000    0.000    0.000 sre_compile.py:595(isstring)
        1    0.000    0.000    0.000    0.000 tokenize.py:350(detect_encoding)
        1    0.000    0.000    0.000    0.000 __init__.py:783(_addHandlerRef)
        1    0.000    0.000    0.000    0.000 __init__.py:1349(setLevel)
        1    0.000    0.000    0.000    0.000 driver.py:699(__init__)
        1    0.000    0.000    0.001    0.001 devices.py:21(__getattr__)
        1    0.000    0.000    0.000    0.000 column_accessor.py:261(<dictcomp>)
        2    0.000    0.000    2.982    1.491 container.py:188(__iadd__)
        1    0.000    0.000    0.104    0.104 dataloader.py:290(_get_iterator)
       12    0.000    0.000    0.000    0.000 __future__.py:18(get_overwrite_module_params_on_conversion)
        1    0.000    0.000    0.000    0.000 join.py:333(input_to_libcudf_casting_rules)
        9    0.000    0.000    0.000    0.000 {method 'translate' of 'bytearray' objects}
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:311(__enter__)
        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1445(path_hook_for_FileFinder)
        1    0.000    0.000    0.000    0.000 warnings.py:20(_showwarnmsg_impl)
        1    0.000    0.000    0.000    0.000 linecache.py:37(getlines)
        1    0.000    0.000    0.000    0.000 __init__.py:802(__init__)
        9    0.000    0.000    0.000    0.000 managers.py:1575(_block)
        1    0.000    0.000    0.001    0.001 devices.py:27(<listcomp>)
        8    0.000    0.000    0.000    0.000 dummyarray.py:110(<genexpr>)
        4    0.000    0.000    0.000    0.000 series.py:427(dtype)
        3    0.000    0.000    0.000    0.000 utils.py:347(_inner)
        1    0.000    0.000    0.000    0.000 utils.py:341(to_flat_dict)
        1    0.000    0.000    0.020    0.020 series.py:4192(to_dlpack)
        3    0.000    0.000    0.000    0.000 _utils.py:461(_get_device_index)
        1    0.000    0.000    0.001    0.001 __init__.py:3(<module>)
      3/2    0.000    0.000    0.001    0.001 {built-in method builtins.exec}
        4    0.000    0.000    0.000    0.000 {built-in method builtins.sum}
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:35(_new_module)
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:46(_w_long)
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:369(__init__)
        9    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:855(__enter__)
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:951(path_stats)
        3    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:1272(find_spec)
        4    0.000    0.000    0.000    0.000 _collections_abc.py:676(items)
        1    0.000    0.000    0.000    0.000 contextlib.py:81(__init__)
        1    0.000    0.000    0.000    0.000 contextlib.py:116(__exit__)
        1    0.000    0.000    0.000    0.000 contextlib.py:417(enter_context)
        1    0.000    0.000    0.000    0.000 {method 'item' of 'numpy.ndarray' objects}
        1    0.000    0.000    0.000    0.000 ast.py:38(literal_eval)
        1    0.000    0.000    0.000    0.000 linecache.py:15(getline)
        2    0.000    0.000    0.000    0.000 tokenize.py:380(find_cookie)
        1    0.000    0.000    0.000    0.000 utils.py:962(safe_eval)
        3    0.000    0.000    0.000    0.000 blocks.py:135(_check_ndim)
        1    0.000    0.000    0.000    0.000 blocks.py:207(array_values)
        2    0.000    0.000    0.000    0.000 driver.py:934(__init__)
        1    0.000    0.000    0.000    0.000 api.py:201(_prepare_shape_strides_dtype)
        4    0.000    0.000    0.000    0.000 devicearray.py:190(device_ctypes_pointer)
        4    0.000    0.000    0.000    0.000 series.py:540(_values)
        4    0.000    0.000    0.000    0.000 column_accessor.py:109(_grouped_data)
        4    0.000    0.000    0.000    0.000 string.py:4772(set_base_data)
        5    0.000    0.000    0.000    0.000 string.py:4800(__len__)
        1    0.000    0.000    0.000    0.000 __init__.py:345(get_arch_list)
        1    0.000    0.000    0.000    0.000 fetch.py:8(__init__)
        1    0.000    0.000    0.000    0.000 join.py:14(Merge)
       10    0.000    0.000    0.000    0.000 {built-in method _thread.allocate_lock}
        3    0.000    0.000    0.000    0.000 codecs.py:319(decode)
        1    0.000    0.000    0.000    0.000 contextlib.py:237(helper)
        2    0.000    0.000    0.000    0.000 sre_compile.py:492(_get_charset_prefix)
        4    0.000    0.000    0.000    0.000 sre_parse.py:76(__init__)
        2    0.000    0.000    0.000    0.000 {built-in method _ctypes.POINTER}
        1    0.000    0.000    0.000    0.000 utils.py:325(__setitem__)
        1    0.000    0.000    0.000    0.000 typing.py:849(__init_subclass__)
        1    0.000    0.000    0.000    0.000 driver.py:1079(prepare_for_use)
        2    0.000    0.000    0.001    0.000 devices.py:130(get_or_create_context)
        2    0.000    0.000    0.000    0.000 dummyarray.py:43(__init__)
        5    0.000    0.000    0.000    0.000 series.py:2132(index)
        1    0.000    0.000    0.104    0.104 dataloader.py:339(__iter__)
        2    0.000    0.000    0.000    0.000 {method 'copy' of 'collections.OrderedDict' objects}
       19    0.000    0.000    0.000    0.000 {built-in method _imp.release_lock}
        2    0.000    0.000    0.000    0.000 {built-in method _imp._fix_co_filename}
        1    0.000    0.000    0.000    0.000 {built-in method _struct.calcsize}
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:98(_path_isdir)
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:884(__init__)
        1    0.000    0.000    0.002    0.002 contextlib.py:107(__enter__)
        1    0.000    0.000    0.000    0.000 fromnumeric.py:2337(all)
        8    0.000    0.000    0.000    0.000 {built-in method _ctypes.byref}
        1    0.000    0.000    0.000    0.000 format.py:282(descr_to_dtype)
        1    0.000    0.000    0.000    0.000 __init__.py:1368(info)
        1    0.000    0.000    0.000    0.000 __init__.py:1548(hasHandlers)
        3    0.000    0.000    0.000    0.000 blocks.py:233(mgr_locs)
        1    0.000    0.000    0.000    0.000 managers.py:220(set_axis)
        3    0.000    0.000    0.000    0.000 devices.py:177(_get_attached_context)
        2    0.000    0.000    0.000    0.000 common.py:608(is_dtype_equal)
        6    0.000    0.000    0.000    0.000 common.py:194(<genexpr>)
        4    0.000    0.000    0.000    0.000 numeric.py:150(is_all_dates)
        1    0.000    0.000    0.000    0.000 dircache.py:27(__init__)
        4    0.000    0.000    0.000    0.000 string.py:4781(set_base_mask)
        2    0.000    0.000    0.000    0.000 dataframe.py:488(<listcomp>)
        1    0.000    0.000    0.000    0.000 graph_module.py:24(patched_getline)
        1    0.000    0.000    0.000    0.000 sampler.py:210(__init__)
        1    0.000    0.000    0.000    0.000 dataloader.py:300(multiprocessing_context)
        6    0.000    0.000    0.000    0.000 {built-in method from_bytes}
        1    0.000    0.000    0.000    0.000 {built-in method torch._C._cuda_getArchFlags}
        4    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:143(__init__)
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:307(__init__)
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:792(find_spec)
        1    0.000    0.000    0.000    0.000 codecs.py:309(__init__)
        6    0.000    0.000    0.000    0.000 _collections_abc.py:271(__subclasshook__)
        1    0.000    0.000    0.000    0.000 __init__.py:109(import_module)
        1    0.000    0.000    0.000    0.000 warnings.py:96(_showwarnmsg)
        1    0.000    0.000    0.000    0.000 warnings.py:415(__init__)
        1    0.000    0.000    0.000    0.000 contextlib.py:376(_exit_wrapper)
        1    0.000    0.000    0.000    0.000 contextlib.py:387(__init__)
        1    0.000    0.000    0.000    0.000 <__array_function__ internals>:2(copyto)
        1    0.000    0.000    0.000    0.000 tokenize.py:312(untokenize)
        2    0.000    0.000    0.000    0.000 __init__.py:99(CFunctionType)
        3    0.000    0.000    0.000    0.000 __init__.py:1170(append)
        1    0.000    0.000    0.000    0.000 __init__.py:1526(addHandler)
        2    0.000    0.000    0.000    0.000 driver.py:372(get_active_context)
        1    0.000    0.000    0.000    0.000 driver.py:569(__init__)
        4    0.000    0.000    0.000    0.000 dummyarray.py:81(get_offset)
        4    0.000    0.000    0.000    0.000 dummyarray.py:181(is_contig)
        2    0.000    0.000    0.000    0.000 buffer.py:67(__cuda_array_interface__)
        2    0.000    0.000    0.000    0.000 cast.py:1595(construct_1d_ndarray_preserving_na)
        1    0.000    0.000    0.000    0.000 series.py:574(array)
        1    0.000    0.000    0.000    0.000 local.py:27(__init__)
        1    0.000    0.000    0.003    0.003 index.py:488(take)
        1    0.000    0.000    0.000    0.000 indexing.py:113(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:266(get_device_name)
        6    0.000    0.000    0.000    0.000 {method 'insert' of 'list' objects}
        3    0.000    0.000    0.000    0.000 {method 'startswith' of 'bytes' objects}
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:416(parent)
        1    0.000    0.000    0.001    0.001 <frozen importlib._bootstrap_external>:785(source_to_code)
        1    0.000    0.000    0.003    0.003 <frozen importlib._bootstrap_external>:956(_cache_bytecode)
        8    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1325(<genexpr>)
        1    0.000    0.000    0.000    0.000 sre_compile.py:432(_generate_overlap_table)
        1    0.000    0.000    0.000    0.000 tokenize.py:219(__init__)
        2    0.000    0.000    0.000    0.000 tokenize.py:374(read_or_stop)
        2    0.000    0.000    0.000    0.000 <string>:1(__new__)
        4    0.000    0.000    0.000    0.000 blocks.py:201(internal_values)
        4    0.000    0.000    0.000    0.000 blocks.py:315(dtype)
        1    0.000    0.000    0.000    0.000 driver.py:874(_ensure_memory_manager)
        1    0.000    0.000    0.000    0.000 {built-in method numba.mviewbuf.memoryview_get_extents_info}
        2    0.000    0.000    0.000    0.000 devices.py:180(_set_attached_context)
        4    0.000    0.000    0.000    0.000 dummyarray.py:162(<genexpr>)
        1    0.000    0.000    0.000    0.000 numpy_.py:50(__init__)
        4    0.000    0.000    0.000    0.000 numeric.py:81(_validate_dtype)
        1    0.000    0.000    0.000    0.000 utils.py:358(<dictcomp>)
        1    0.000    0.000    0.000    0.000 registry.py:44(register_implementation)
        2    0.000    0.000    0.000    0.000 series.py:782(__len__)
        1    0.000    0.000    0.000    0.000 series.py:1718(dtype)
        2    0.000    0.000    0.000    0.000 container.py:180(__len__)
        3    0.000    0.000    0.000    0.000 msms.py:35(__len__)
        2    0.000    0.000    0.000    0.000 {method 'seek' of '_io.BufferedReader' objects}
       16    0.000    0.000    0.000    0.000 {method 'span' of 're.Match' objects}
        3    0.000    0.000    0.000    0.000 {built-in method _imp.is_frozen}
        2    0.000    0.000    0.000    0.000 {built-in method builtins.delattr}
        1    0.000    0.000    0.000    0.000 {built-in method builtins.sorted}
        6    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}
        9    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}
        4    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:194(_lock_unlock_module)
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:719(find_spec)
        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:994(_gcd_import)
        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:381(_calc_mode)
        2    0.000    0.000    0.000    0.000 _collections_abc.py:716(__contains__)
        1    0.000    0.000    0.000    0.000 contextlib.py:456(_push_cm_exit)
        5    0.000    0.000    0.000    0.000 sre_compile.py:453(_get_iscased)
        1    0.000    0.000    0.000    0.000 fromnumeric.py:2333(_all_dispatcher)
        1    0.000    0.000    0.000    0.000 ast.py:30(parse)
        1    0.000    0.000    0.000    0.000 format.py:217(read_magic)
        2    0.000    0.000    0.000    0.000 __init__.py:716(__init__)
        2    0.000    0.000    0.000    0.000 driver.py:413(__exit__)
        4    0.000    0.000    0.000    0.000 driver.py:1626(device_ctypes_pointer)
        2    0.000    0.000    0.000    0.000 driver.py:2200(device_memory_size)
        1    0.000    0.000    0.000    0.000 devices.py:208(get_context)
        4    0.000    0.000    0.000    0.000 dummyarray.py:105(is_contiguous)
        4    0.000    0.000    0.000    0.000 dummyarray.py:163(<genexpr>)
        2    0.000    0.000    0.000    0.000 dummyarray.py:195(<listcomp>)
        1    0.000    0.000    0.000    0.000 syncdetect.py:32(_declare_synchronize)
        1    0.000    0.000    0.000    0.000 common.py:274(maybe_iterable_to_list)
        1    0.000    0.000    0.000    0.000 numpy_.py:210(__array__)
        4    0.000    0.000    0.000    0.000 {function StringColumn.set_base_mask at 0x2ae236f69950}
        4    0.000    0.000    0.000    0.000 {function StringColumn.set_base_children at 0x2ae236f699e0}
        1    0.000    0.000    0.000    0.000 __init__.py:100(<listcomp>)
        1    0.000    0.000    0.336    0.336 module.py:449(cuda)
        2    0.000    0.000    0.000    0.000 sampler.py:106(num_samples)
        3    0.000    0.000    0.000    0.000 dataloader.py:354(_auto_collation)
        1    0.000    0.000    0.000    0.000 join.py:412(libcudf_to_output_casting_rules)
        3    0.000    0.000    0.000    0.000 {built-in method _codecs.utf_8_decode}
        6    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}
        4    0.000    0.000    0.000    0.000 {method 'copy' of 'dict' objects}
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:424(has_location)
        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:929(_sanity_check)
        1    0.000    0.000    0.000    0.000 _collections_abc.py:349(__subclasshook__)
        1    0.000    0.000    0.000    0.000 _collections_abc.py:367(__subclasshook__)
        1    0.000    0.000    0.000    0.000 warnings.py:117(_formatwarnmsg)
        1    0.000    0.000    0.000    0.000 contextlib.py:462(_push_exit_callback)
        1    0.000    0.000    0.000    0.000 fromnumeric.py:71(<dictcomp>)
        3    0.000    0.000    0.000    0.000 __init__.py:187(_checkLevel)
        2    0.000    0.000    0.000    0.000 __init__.py:1600(getEffectiveLevel)
        1    0.000    0.000    0.000    0.000 __init__.py:2073(createLock)
        1    0.000    0.000    0.000    0.000 driver.py:189(_getpid)
        1    0.000    0.000    0.000    0.000 devices.py:73(__init__)
        1    0.000    0.000    0.000    0.000 devices.py:76(__getattr__)
        1    0.000    0.000    0.000    0.000 base.py:5559(ensure_index)
        4    0.000    0.000    0.000    0.000 {function StringColumn.set_base_data at 0x2ae236f698c0}
        1    0.000    0.000    0.000    0.000 index.py:1998(dtype)
        1    0.000    0.000    0.000    0.000 indexing.py:69(__init__)
        3    0.000    0.000    0.000    0.000 index.py:2090(__init__)
        2    0.000    0.000    0.000    0.000 {method 'readline' of '_io.StringIO' objects}
        6    0.000    0.000    0.000    0.000 {method 'release' of '_thread.RLock' objects}
       10    0.000    0.000    0.000    0.000 {built-in method _thread.get_ident}
        2    0.000    0.000    0.000    0.000 {built-in method _weakref.proxy}
        1    0.000    0.000    0.000    0.000 {built-in method sys.exc_info}
        1    0.000    0.000    0.000    0.000 {built-in method _imp.is_builtin}
        1    0.000    0.000    0.000    0.000 {method 'rsplit' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
        3    0.000    0.000    0.000    0.000 {method 'decode' of 'bytes' objects}
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:40(_relax_case)
        1    0.000    0.000    0.000    0.000 {built-in method _struct.unpack}
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:719(create_module)
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:909(get_filename)
        1    0.000    0.000    0.000    0.000 codecs.py:260(__init__)
        1    0.000    0.000    0.000    0.000 contextlib.py:374(_create_exit_wrapper)
        1    0.000    0.000    0.000    0.000 contextlib.py:478(__enter__)
        1    0.000    0.000    0.000    0.000 multiarray.py:1043(copyto)
        1    0.000    0.000    0.000    0.000 tokenize.py:672(generate_tokens)
        1    0.000    0.000    0.000    0.000 format.py:190(_check_version)
        1    0.000    0.000    0.000    0.000 format.py:597(<listcomp>)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 rmm.py:96(initialize)
        1    0.000    0.000    0.000    0.000 driver.py:417(__bool__)
        1    0.000    0.000    0.000    0.000 driver.py:560(met_requirement_for_device)
        1    0.000    0.000    0.000    0.000 api.py:70(is_cuda_array)
        1    0.000    0.000    0.000    0.000 devicearray.py:385(nbytes)
        4    0.000    0.000    0.000    0.000 dataframe.py:516(_constructor_sliced)
        1    0.000    0.000    0.000    0.000 dataloader.py:358(_index_sampler)
        1    0.000    0.000    0.000    0.000 msms.py:17(Dataset)
        1    0.000    0.000    0.000    0.000 msms.py:46(Net)
        4    0.000    0.000    0.000    0.000 {method 'extend' of 'bytearray' objects}
        1    0.000    0.000    0.000    0.000 {method '__enter__' of '_io._IOBase' objects}
        1    0.000    0.000    0.000    0.000 {method 'append' of 'collections.deque' objects}
        1    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
       11    0.000    0.000    0.000    0.000 {method 'isidentifier' of 'str' objects}
        3    0.000    0.000    0.000    0.000 {method 'to_bytes' of 'int' objects}
        1    0.000    0.000    0.000    0.000 {built-in method torch._C._cuda_getCompiledVersion}
        1    0.000    0.000    0.000    0.000 {method 'pop' of 'collections.deque' objects}
        1    0.000    0.000    0.000    0.000 {built-in method builtins.id}
        1    0.000    0.000    0.000    0.000 {method '__init_subclass__' of 'object' objects}
        1    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}


