<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="358.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="341" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="341" > </text>
<g id="frames">
<g >
<title>column.py:1401:build_column (382,150 samples, 0.67%)</title><rect x="1072.1" y="133" width="7.8" height="15.0" fill="rgb(223,54,52)" rx="2" ry="2" />
<text  x="1075.09" y="143.5" ></text>
</g>
<g >
<title>~:0:&lt;cudf._lib.string_casting.stod&gt; (326,044 samples, 0.57%)</title><rect x="1135.1" y="133" width="6.7" height="15.0" fill="rgb(245,90,21)" rx="2" ry="2" />
<text  x="1138.13" y="143.5" ></text>
</g>
<g >
<title>_tensor_str.py:277:_str_intern (267,481 samples, 0.47%)</title><rect x="1184.5" y="213" width="5.5" height="15.0" fill="rgb(211,141,11)" rx="2" ry="2" />
<text  x="1187.50" y="223.5" ></text>
</g>
<g >
<title>contextlib.py:71:inner (638,418 samples, 1.11%)</title><rect x="1152.3" y="165" width="13.1" height="15.0" fill="rgb(247,34,47)" rx="2" ry="2" />
<text  x="1155.28" y="175.5" ></text>
</g>
<g >
<title>tensor.py:528:__format__ (293,128 samples, 0.51%)</title><rect x="1184.0" y="277" width="6.0" height="15.0" fill="rgb(242,82,9)" rx="2" ry="2" />
<text  x="1186.97" y="287.5" ></text>
</g>
<g >
<title>~:0:&lt;cudf._lib.copying.gather&gt; (571,433 samples, 1.00%)</title><rect x="1109.0" y="133" width="11.7" height="15.0" fill="rgb(254,28,5)" rx="2" ry="2" />
<text  x="1111.97" y="143.5" ></text>
</g>
<g >
<title>frame.py:1482:_apply_boolean_mask (1,154,689 samples, 2.01%)</title><rect x="1084.1" y="149" width="23.7" height="15.0" fill="rgb(249,32,27)" rx="2" ry="2" />
<text  x="1087.08" y="159.5" >f..</text>
</g>
<g >
<title>~:0:&lt;built-in method posix.stat&gt; (342,396 samples, 0.60%)</title><rect x="27.2" y="117" width="7.0" height="15.0" fill="rgb(209,146,26)" rx="2" ry="2" />
<text  x="30.15" y="127.5" ></text>
</g>
<g >
<title>~:0:&lt;method 'item' of 'torch._C._TensorBase' objects&gt; (88,314 samples, 0.15%)</title><rect x="12.2" y="213" width="1.9" height="15.0" fill="rgb(221,135,19)" rx="2" ry="2" />
<text  x="15.25" y="223.5" ></text>
</g>
<g >
<title>frame.py:507:_gather (586,947 samples, 1.02%)</title><rect x="1108.7" y="149" width="12.0" height="15.0" fill="rgb(251,149,40)" rx="2" ry="2" />
<text  x="1111.65" y="159.5" ></text>
</g>
<g >
<title>dataloader.py:401:__init__ (322,129 samples, 0.56%)</title><rect x="10.1" y="229" width="6.6" height="15.0" fill="rgb(229,103,46)" rx="2" ry="2" />
<text  x="13.06" y="239.5" ></text>
</g>
<g >
<title>series.py:3652:isin (536,776 samples, 0.94%)</title><rect x="1167.7" y="181" width="11.0" height="15.0" fill="rgb(210,42,44)" rx="2" ry="2" />
<text  x="1170.69" y="191.5" ></text>
</g>
<g >
<title>~:0:&lt;cudf._lib.stream_compaction.apply_boolean_mask&gt; (1,136,041 samples, 1.98%)</title><rect x="1084.5" y="133" width="23.3" height="15.0" fill="rgb(230,189,23)" rx="2" ry="2" />
<text  x="1087.47" y="143.5" >~..</text>
</g>
<g >
<title>dataframe.py:3669:sort_values (188,986 samples, 0.33%)</title><rect x="1174.8" y="149" width="3.9" height="15.0" fill="rgb(244,72,7)" rx="2" ry="2" />
<text  x="1177.84" y="159.5" ></text>
</g>
<g >
<title>~:0:&lt;function Tensor.__format__ at 0x2b47d38d35f0&gt; (267,641 samples, 0.47%)</title><rect x="1184.5" y="261" width="5.5" height="15.0" fill="rgb(245,174,22)" rx="2" ry="2" />
<text  x="1187.50" y="271.5" ></text>
</g>
<g >
<title>string.py:4813:as_numerical_column (1,236,972 samples, 2.16%)</title><rect x="1124.1" y="149" width="25.4" height="15.0" fill="rgb(242,154,10)" rx="2" ry="2" />
<text  x="1127.11" y="159.5" >s..</text>
</g>
<g >
<title>frame.py:3173:_merge (135,145 samples, 0.24%)</title><rect x="1080.0" y="149" width="2.8" height="15.0" fill="rgb(232,24,15)" rx="2" ry="2" />
<text  x="1082.99" y="159.5" ></text>
</g>
<g >
<title>tensor.py:173:__repr__ (267,631 samples, 0.47%)</title><rect x="1184.5" y="245" width="5.5" height="15.0" fill="rgb(237,27,40)" rx="2" ry="2" />
<text  x="1187.50" y="255.5" ></text>
</g>
<g >
<title>column.py:844:isin (536,444 samples, 0.93%)</title><rect x="1167.7" y="165" width="11.0" height="15.0" fill="rgb(228,68,32)" rx="2" ry="2" />
<text  x="1170.70" y="175.5" ></text>
</g>
<g >
<title>column.py:591:__getitem__ (150,715 samples, 0.26%)</title><rect x="1175.6" y="85" width="3.1" height="15.0" fill="rgb(217,11,28)" rx="2" ry="2" />
<text  x="1178.63" y="95.5" ></text>
</g>
<g >
<title>_tensor_str.py:370:_str (267,602 samples, 0.47%)</title><rect x="1184.5" y="229" width="5.5" height="15.0" fill="rgb(209,52,41)" rx="2" ry="2" />
<text  x="1187.50" y="239.5" ></text>
</g>
<g >
<title>msms_profiler.py:45:read_file (56,419,772 samples, 98.30%)</title><rect x="21.2" y="197" width="1160.0" height="15.0" fill="rgb(206,223,10)" rx="2" ry="2" />
<text  x="24.21" y="207.5" >msms_profiler.py:45:read_file</text>
</g>
<g >
<title>msms_profiler.py:21:__init__ (64,128 samples, 0.11%)</title><rect x="1182.7" y="277" width="1.3" height="15.0" fill="rgb(215,183,26)" rx="2" ry="2" />
<text  x="1185.65" y="287.5" ></text>
</g>
<g >
<title>column.py:182:all (459,547 samples, 0.80%)</title><rect x="1125.7" y="133" width="9.4" height="15.0" fill="rgb(213,6,15)" rx="2" ry="2" />
<text  x="1128.68" y="143.5" ></text>
</g>
<g >
<title>column.py:994:astype (1,381,804 samples, 2.41%)</title><rect x="1121.1" y="165" width="28.4" height="15.0" fill="rgb(237,78,26)" rx="2" ry="2" />
<text  x="1124.13" y="175.5" >co..</text>
</g>
<g >
<title>~:0:&lt;built-in method empty&gt; (106,142 samples, 0.18%)</title><rect x="10.1" y="213" width="2.1" height="15.0" fill="rgb(210,229,47)" rx="2" ry="2" />
<text  x="13.07" y="223.5" ></text>
</g>
<g >
<title>series.py:2240:argsort (179,017 samples, 0.31%)</title><rect x="1175.0" y="133" width="3.7" height="15.0" fill="rgb(233,81,13)" rx="2" ry="2" />
<text  x="1178.05" y="143.5" ></text>
</g>
<g >
<title>~:0:&lt;method 'random_' of 'torch._C._TensorBase' objects&gt; (127,586 samples, 0.22%)</title><rect x="14.1" y="213" width="2.6" height="15.0" fill="rgb(239,50,15)" rx="2" ry="2" />
<text  x="17.06" y="223.5" ></text>
</g>
<g >
<title>dataloader.py:432:__next__ (56,710,193 samples, 98.81%)</title><rect x="16.7" y="277" width="1166.0" height="15.0" fill="rgb(230,174,29)" rx="2" ry="2" />
<text  x="19.69" y="287.5" >dataloader.py:432:__next__</text>
</g>
<g >
<title>fetch.py:42:fetch (56,671,983 samples, 98.74%)</title><rect x="17.5" y="245" width="1165.2" height="15.0" fill="rgb(208,0,22)" rx="2" ry="2" />
<text  x="20.47" y="255.5" >fetch.py:42:fetch</text>
</g>
<g >
<title>column.py:1537:as_column (89,647 samples, 0.16%)</title><rect x="1169.0" y="149" width="1.8" height="15.0" fill="rgb(230,88,41)" rx="2" ry="2" />
<text  x="1171.99" y="159.5" ></text>
</g>
<g >
<title>dataframe.py:3973:merge (137,205 samples, 0.24%)</title><rect x="1079.9" y="165" width="2.9" height="15.0" fill="rgb(238,158,15)" rx="2" ry="2" />
<text  x="1082.95" y="175.5" ></text>
</g>
<g >
<title>column.py:1401:build_column (76,117 samples, 0.13%)</title><rect x="1119.2" y="117" width="1.5" height="15.0" fill="rgb(246,112,39)" rx="2" ry="2" />
<text  x="1122.16" y="127.5" ></text>
</g>
<g >
<title>index.py:582:to_pandas (68,254 samples, 0.12%)</title><rect x="1150.9" y="181" width="1.4" height="15.0" fill="rgb(233,56,22)" rx="2" ry="2" />
<text  x="1153.88" y="191.5" ></text>
</g>
<g >
<title>~:0:&lt;cudf._lib.reduce.reduce&gt; (454,213 samples, 0.79%)</title><rect x="1125.8" y="117" width="9.3" height="15.0" fill="rgb(217,206,4)" rx="2" ry="2" />
<text  x="1128.79" y="127.5" ></text>
</g>
<g >
<title>buffer.py:15:__init__ (161,168 samples, 0.28%)</title><rect x="1068.8" y="133" width="3.3" height="15.0" fill="rgb(213,196,24)" rx="2" ry="2" />
<text  x="1071.78" y="143.5" ></text>
</g>
<g >
<title>column.py:152:values (65,648 samples, 0.11%)</title><rect x="1150.9" y="149" width="1.4" height="15.0" fill="rgb(228,180,51)" rx="2" ry="2" />
<text  x="1153.93" y="159.5" ></text>
</g>
<g >
<title>buffer.py:83:_init_from_array_like (101,363 samples, 0.18%)</title><rect x="1070.0" y="117" width="2.1" height="15.0" fill="rgb(228,191,36)" rx="2" ry="2" />
<text  x="1073.01" y="127.5" ></text>
</g>
<g >
<title>contextlib.py:71:inner (53,256,948 samples, 92.79%)</title><rect x="25.8" y="181" width="1094.9" height="15.0" fill="rgb(247,127,43)" rx="2" ry="2" />
<text  x="28.75" y="191.5" >contextlib.py:71:inner</text>
</g>
<g >
<title>all (57,392,689 samples, 100%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(216,227,40)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>csv.py:13:read_csv (613,857 samples, 1.07%)</title><rect x="1152.8" y="149" width="12.6" height="15.0" fill="rgb(208,185,52)" rx="2" ry="2" />
<text  x="1155.79" y="159.5" ></text>
</g>
<g >
<title>~:0:&lt;cudf._lib.csv.read_csv&gt; (609,612 samples, 1.06%)</title><rect x="1152.9" y="133" width="12.5" height="15.0" fill="rgb(212,2,24)" rx="2" ry="2" />
<text  x="1155.87" y="143.5" ></text>
</g>
<g >
<title>series.py:2179:astype (111,046 samples, 0.19%)</title><rect x="1165.4" y="181" width="2.3" height="15.0" fill="rgb(250,11,33)" rx="2" ry="2" />
<text  x="1168.41" y="191.5" ></text>
</g>
<g >
<title>column.py:127:to_pandas (67,829 samples, 0.12%)</title><rect x="1150.9" y="165" width="1.4" height="15.0" fill="rgb(206,2,7)" rx="2" ry="2" />
<text  x="1153.89" y="175.5" ></text>
</g>
<g >
<title>column.py:983:sort_by_values (178,561 samples, 0.31%)</title><rect x="1175.1" y="101" width="3.6" height="15.0" fill="rgb(223,117,53)" rx="2" ry="2" />
<text  x="1178.06" y="111.5" ></text>
</g>
<g >
<title>dataloader.py:473:_next_data (56,710,182 samples, 98.81%)</title><rect x="16.7" y="261" width="1166.0" height="15.0" fill="rgb(251,30,42)" rx="2" ry="2" />
<text  x="19.69" y="271.5" >dataloader.py:473:_next_data</text>
</g>
<g >
<title>contextlib.py:71:inner (133,567 samples, 0.23%)</title><rect x="1172.1" y="149" width="2.7" height="15.0" fill="rgb(215,58,26)" rx="2" ry="2" />
<text  x="1175.09" y="159.5" ></text>
</g>
<g >
<title>dataframe.py:616:__getitem__ (1,218,542 samples, 2.12%)</title><rect x="1082.8" y="165" width="25.0" height="15.0" fill="rgb(238,171,12)" rx="2" ry="2" />
<text  x="1085.77" y="175.5" >d..</text>
</g>
<g >
<title>npyio.py:283:load (64,085 samples, 0.11%)</title><rect x="1182.7" y="261" width="1.3" height="15.0" fill="rgb(208,211,6)" rx="2" ry="2" />
<text  x="1185.66" y="271.5" ></text>
</g>
<g >
<title>buffer.py:15:__init__ (63,490 samples, 0.11%)</title><rect x="1117.8" y="117" width="1.4" height="15.0" fill="rgb(206,178,48)" rx="2" ry="2" />
<text  x="1120.85" y="127.5" ></text>
</g>
<g >
<title>dtypes.py:172:is_categorical_dtype (59,735 samples, 0.10%)</title><rect x="1122.9" y="149" width="1.2" height="15.0" fill="rgb(247,111,14)" rx="2" ry="2" />
<text  x="1125.88" y="159.5" ></text>
</g>
<g >
<title>~:0:&lt;built-in method isfinite&gt; (77,150 samples, 0.13%)</title><rect x="1188.4" y="165" width="1.6" height="15.0" fill="rgb(232,25,31)" rx="2" ry="2" />
<text  x="1191.41" y="175.5" ></text>
</g>
<g >
<title>genericpath.py:16:exists (342,411 samples, 0.60%)</title><rect x="27.2" y="133" width="7.0" height="15.0" fill="rgb(225,29,41)" rx="2" ry="2" />
<text  x="30.15" y="143.5" ></text>
</g>
<g >
<title>join.py:101:perform_merge (114,348 samples, 0.20%)</title><rect x="1080.4" y="133" width="2.4" height="15.0" fill="rgb(225,67,15)" rx="2" ry="2" />
<text  x="1083.42" y="143.5" ></text>
</g>
<g >
<title>csv.py:13:read_csv (51,217,684 samples, 89.24%)</title><rect x="26.9" y="165" width="1053.0" height="15.0" fill="rgb(206,44,26)" rx="2" ry="2" />
<text  x="29.91" y="175.5" >csv.py:13:read_csv</text>
</g>
<g >
<title>_tensor_str.py:220:_tensor_str (267,162 samples, 0.47%)</title><rect x="1184.5" y="197" width="5.5" height="15.0" fill="rgb(206,105,18)" rx="2" ry="2" />
<text  x="1187.51" y="207.5" ></text>
</g>
<g >
<title>~:0:&lt;cudf._lib.copying.gather&gt; (144,003 samples, 0.25%)</title><rect x="1175.8" y="37" width="2.9" height="15.0" fill="rgb(238,177,9)" rx="2" ry="2" />
<text  x="1178.77" y="47.5" ></text>
</g>
<g >
<title>dataloader.py:465:__init__ (322,175 samples, 0.56%)</title><rect x="10.1" y="245" width="6.6" height="15.0" fill="rgb(219,17,48)" rx="2" ry="2" />
<text  x="13.06" y="255.5" ></text>
</g>
<g >
<title>dataloader.py:339:__iter__ (322,182 samples, 0.56%)</title><rect x="10.1" y="277" width="6.6" height="15.0" fill="rgb(244,90,15)" rx="2" ry="2" />
<text  x="13.06" y="287.5" ></text>
</g>
<g >
<title>series.py:2343:_sort (178,952 samples, 0.31%)</title><rect x="1175.0" y="117" width="3.7" height="15.0" fill="rgb(228,54,43)" rx="2" ry="2" />
<text  x="1178.05" y="127.5" ></text>
</g>
<g >
<title>indexing.py:166:__getitem__ (638,480 samples, 1.11%)</title><rect x="1152.3" y="181" width="13.1" height="15.0" fill="rgb(245,12,9)" rx="2" ry="2" />
<text  x="1155.28" y="191.5" ></text>
</g>
<g >
<title>msms_profiler.py:73:main (57,392,689 samples, 100.00%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(248,89,25)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >msms_profiler.py:73:main</text>
</g>
<g >
<title>~:0:&lt;method 'int' of 'torch._C._TensorBase' objects&gt; (70,385 samples, 0.12%)</title><rect x="1181.2" y="197" width="1.5" height="15.0" fill="rgb(236,76,38)" rx="2" ry="2" />
<text  x="1184.21" y="207.5" ></text>
</g>
<g >
<title>~:0:&lt;built-in method torch._C._from_dlpack&gt; (120,670 samples, 0.21%)</title><rect x="1178.7" y="181" width="2.5" height="15.0" fill="rgb(248,152,7)" rx="2" ry="2" />
<text  x="1181.73" y="191.5" ></text>
</g>
<g >
<title>column.py:2025:arange (61,220 samples, 0.11%)</title><rect x="1170.8" y="149" width="1.3" height="15.0" fill="rgb(213,110,6)" rx="2" ry="2" />
<text  x="1173.84" y="159.5" ></text>
</g>
<g >
<title>dataframe.py:1034:astype (1,466,750 samples, 2.56%)</title><rect x="1120.7" y="181" width="30.2" height="15.0" fill="rgb(241,110,0)" rx="2" ry="2" />
<text  x="1123.72" y="191.5" >da..</text>
</g>
<g >
<title>~:0:&lt;cudf._lib.csv.read_csv&gt; (127,419 samples, 0.22%)</title><rect x="1172.2" y="117" width="2.6" height="15.0" fill="rgb(252,64,37)" rx="2" ry="2" />
<text  x="1175.22" y="127.5" ></text>
</g>
<g >
<title>string.py:4813:as_numerical_column (100,265 samples, 0.17%)</title><rect x="1165.6" y="149" width="2.1" height="15.0" fill="rgb(234,191,26)" rx="2" ry="2" />
<text  x="1168.63" y="159.5" ></text>
</g>
<g >
<title>indexing.py:387:_getitem_tuple_arg (627,276 samples, 1.09%)</title><rect x="1107.8" y="165" width="12.9" height="15.0" fill="rgb(221,38,20)" rx="2" ry="2" />
<text  x="1110.82" y="175.5" ></text>
</g>
<g >
<title>collate.py:42:default_collate (98,714 samples, 0.17%)</title><rect x="17.5" y="229" width="2.0" height="15.0" fill="rgb(229,229,9)" rx="2" ry="2" />
<text  x="20.47" y="239.5" ></text>
</g>
<g >
<title>column.py:994:astype (110,702 samples, 0.19%)</title><rect x="1165.4" y="165" width="2.3" height="15.0" fill="rgb(229,132,12)" rx="2" ry="2" />
<text  x="1168.41" y="175.5" ></text>
</g>
<g >
<title>_tensor_str.py:74:__init__ (231,326 samples, 0.40%)</title><rect x="1185.2" y="181" width="4.8" height="15.0" fill="rgb(224,194,33)" rx="2" ry="2" />
<text  x="1188.24" y="191.5" ></text>
</g>
<g >
<title>buffer.py:15:__init__ (82,490 samples, 0.14%)</title><rect x="1104.1" y="117" width="1.6" height="15.0" fill="rgb(242,172,51)" rx="2" ry="2" />
<text  x="1107.05" y="127.5" ></text>
</g>
<g >
<title>csv.py:13:read_csv (128,306 samples, 0.22%)</title><rect x="1172.2" y="133" width="2.6" height="15.0" fill="rgb(216,114,42)" rx="2" ry="2" />
<text  x="1175.20" y="143.5" ></text>
</g>
<g >
<title>~:0:&lt;built-in method cudf._lib.join.join&gt; (81,096 samples, 0.14%)</title><rect x="1081.1" y="117" width="1.7" height="15.0" fill="rgb(220,18,16)" rx="2" ry="2" />
<text  x="1084.10" y="127.5" ></text>
</g>
<g >
<title>column.py:825:take (150,600 samples, 0.26%)</title><rect x="1175.6" y="69" width="3.1" height="15.0" fill="rgb(218,118,31)" rx="2" ry="2" />
<text  x="1178.63" y="79.5" ></text>
</g>
<g >
<title>~:0:&lt;cudf._lib.strings.char_types.is_float&gt; (374,695 samples, 0.65%)</title><rect x="1141.8" y="133" width="7.7" height="15.0" fill="rgb(238,192,43)" rx="2" ry="2" />
<text  x="1144.84" y="143.5" ></text>
</g>
<g >
<title>fetch.py:44:&lt;listcomp&gt; (56,573,260 samples, 98.57%)</title><rect x="19.5" y="229" width="1163.2" height="15.0" fill="rgb(231,45,37)" rx="2" ry="2" />
<text  x="22.50" y="239.5" >fetch.py:44:&lt;listcomp&gt;</text>
</g>
<g >
<title>~:0:&lt;cudf._lib.csv.read_csv&gt; (50,863,488 samples, 88.62%)</title><rect x="34.2" y="149" width="1045.7" height="15.0" fill="rgb(239,82,0)" rx="2" ry="2" />
<text  x="37.19" y="159.5" >~:0:&lt;cudf._lib.csv.read_csv&gt;</text>
</g>
<g >
<title>column_accessor.py:50:__setitem__ (65,022 samples, 0.11%)</title><rect x="1149.5" y="165" width="1.4" height="15.0" fill="rgb(244,76,31)" rx="2" ry="2" />
<text  x="1152.54" y="175.5" ></text>
</g>
<g >
<title>dataloader.py:290:_get_iterator (322,179 samples, 0.56%)</title><rect x="10.1" y="261" width="6.6" height="15.0" fill="rgb(231,88,22)" rx="2" ry="2" />
<text  x="13.06" y="271.5" ></text>
</g>
<g >
<title>frame.py:507:_gather (150,032 samples, 0.26%)</title><rect x="1175.6" y="53" width="3.1" height="15.0" fill="rgb(231,33,44)" rx="2" ry="2" />
<text  x="1178.64" y="63.5" ></text>
</g>
<g >
<title>msms_profiler.py:37:__getitem__ (56,573,247 samples, 98.57%)</title><rect x="19.5" y="213" width="1163.2" height="15.0" fill="rgb(242,90,21)" rx="2" ry="2" />
<text  x="22.50" y="223.5" >msms_profiler.py:37:__getitem__</text>
</g>
<g >
<title>column.py:1401:build_column (100,895 samples, 0.18%)</title><rect x="1105.7" y="117" width="2.1" height="15.0" fill="rgb(235,116,32)" rx="2" ry="2" />
<text  x="1108.75" y="127.5" ></text>
</g>
<g >
<title>ioutils.py:1090:get_filepath_or_buffer (342,801 samples, 0.60%)</title><rect x="27.1" y="149" width="7.1" height="15.0" fill="rgb(221,88,29)" rx="2" ry="2" />
<text  x="30.14" y="159.5" ></text>
</g>
</g>
</svg>
