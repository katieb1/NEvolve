<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="358.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="341" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="341" > </text>
<g id="frames">
<g >
<title>~:0:&lt;method 'random_' of 'torch._C._TensorBase' objects&gt; (127,193 samples, 0.18%)</title><rect x="13.7" y="213" width="2.1" height="15.0" fill="rgb(244,92,42)" rx="2" ry="2" />
<text  x="16.67" y="223.5" ></text>
</g>
<g >
<title>dataframe.py:3669:sort_values (172,959 samples, 0.25%)</title><rect x="1176.3" y="149" width="2.9" height="15.0" fill="rgb(241,1,8)" rx="2" ry="2" />
<text  x="1179.25" y="159.5" ></text>
</g>
<g >
<title>series.py:2240:argsort (161,442 samples, 0.23%)</title><rect x="1176.4" y="133" width="2.8" height="15.0" fill="rgb(223,176,7)" rx="2" ry="2" />
<text  x="1179.45" y="143.5" ></text>
</g>
<g >
<title>~:0:&lt;cudf._lib.csv.read_csv&gt; (159,081 samples, 0.23%)</title><rect x="1173.5" y="117" width="2.8" height="15.0" fill="rgb(219,197,4)" rx="2" ry="2" />
<text  x="1176.54" y="127.5" ></text>
</g>
<g >
<title>dataloader.py:432:__next__ (68,459,862 samples, 98.89%)</title><rect x="15.8" y="277" width="1166.9" height="15.0" fill="rgb(221,179,6)" rx="2" ry="2" />
<text  x="18.83" y="287.5" >dataloader.py:432:__next__</text>
</g>
<g >
<title>csv.py:13:read_csv (248,877 samples, 0.36%)</title><rect x="1162.7" y="149" width="4.2" height="15.0" fill="rgb(228,134,53)" rx="2" ry="2" />
<text  x="1165.69" y="159.5" ></text>
</g>
<g >
<title>column.py:994:astype (128,432 samples, 0.19%)</title><rect x="1166.9" y="165" width="2.2" height="15.0" fill="rgb(219,141,47)" rx="2" ry="2" />
<text  x="1169.93" y="175.5" ></text>
</g>
<g >
<title>indexing.py:387:_getitem_tuple_arg (249,737 samples, 0.36%)</title><rect x="1155.7" y="165" width="4.3" height="15.0" fill="rgb(206,108,28)" rx="2" ry="2" />
<text  x="1158.73" y="175.5" ></text>
</g>
<g >
<title>dataframe.py:1034:astype (154,674 samples, 0.22%)</title><rect x="1160.0" y="181" width="2.6" height="15.0" fill="rgb(229,155,0)" rx="2" ry="2" />
<text  x="1162.98" y="191.5" ></text>
</g>
<g >
<title>~:0:&lt;built-in method posix.stat&gt; (499,073 samples, 0.72%)</title><rect x="24.9" y="117" width="8.5" height="15.0" fill="rgb(216,116,17)" rx="2" ry="2" />
<text  x="27.94" y="127.5" ></text>
</g>
<g >
<title>tensor.py:528:__format__ (357,360 samples, 0.52%)</title><rect x="1183.9" y="277" width="6.1" height="15.0" fill="rgb(205,86,27)" rx="2" ry="2" />
<text  x="1186.91" y="287.5" ></text>
</g>
<g >
<title>~:0:&lt;cudf._lib.copying.gather&gt; (113,346 samples, 0.16%)</title><rect x="1177.3" y="37" width="1.9" height="15.0" fill="rgb(221,162,43)" rx="2" ry="2" />
<text  x="1180.27" y="47.5" ></text>
</g>
<g >
<title>dataframe.py:616:__getitem__ (490,714 samples, 0.71%)</title><rect x="1147.4" y="165" width="8.3" height="15.0" fill="rgb(232,157,36)" rx="2" ry="2" />
<text  x="1150.36" y="175.5" ></text>
</g>
<g >
<title>msms_profiler.py:37:__getitem__ (68,307,820 samples, 98.67%)</title><rect x="18.4" y="213" width="1164.3" height="15.0" fill="rgb(224,23,7)" rx="2" ry="2" />
<text  x="21.43" y="223.5" >msms_profiler.py:37:__getitem__</text>
</g>
<g >
<title>column.py:591:__getitem__ (125,549 samples, 0.18%)</title><rect x="1177.1" y="85" width="2.1" height="15.0" fill="rgb(215,194,4)" rx="2" ry="2" />
<text  x="1180.06" y="95.5" ></text>
</g>
<g >
<title>~:0:&lt;cudf._lib.csv.read_csv&gt; (246,942 samples, 0.36%)</title><rect x="1162.7" y="133" width="4.2" height="15.0" fill="rgb(223,215,14)" rx="2" ry="2" />
<text  x="1165.72" y="143.5" ></text>
</g>
<g >
<title>msms_profiler.py:45:read_file (68,166,645 samples, 98.47%)</title><rect x="19.6" y="197" width="1161.9" height="15.0" fill="rgb(239,158,26)" rx="2" ry="2" />
<text  x="22.58" y="207.5" >msms_profiler.py:45:read_file</text>
</g>
<g >
<title>_tensor_str.py:74:__init__ (278,203 samples, 0.40%)</title><rect x="1185.3" y="181" width="4.7" height="15.0" fill="rgb(214,226,54)" rx="2" ry="2" />
<text  x="1188.26" y="191.5" ></text>
</g>
<g >
<title>tensor.py:173:__repr__ (322,140 samples, 0.47%)</title><rect x="1184.5" y="245" width="5.5" height="15.0" fill="rgb(207,79,40)" rx="2" ry="2" />
<text  x="1187.51" y="255.5" ></text>
</g>
<g >
<title>buffer.py:83:_init_from_array_like (74,666 samples, 0.11%)</title><rect x="1141.4" y="117" width="1.3" height="15.0" fill="rgb(243,97,53)" rx="2" ry="2" />
<text  x="1144.39" y="127.5" ></text>
</g>
<g >
<title>series.py:2179:astype (128,778 samples, 0.19%)</title><rect x="1166.9" y="181" width="2.2" height="15.0" fill="rgb(223,55,22)" rx="2" ry="2" />
<text  x="1169.93" y="191.5" ></text>
</g>
<g >
<title>npyio.py:283:load (69,367 samples, 0.10%)</title><rect x="1182.7" y="261" width="1.2" height="15.0" fill="rgb(206,215,12)" rx="2" ry="2" />
<text  x="1185.73" y="271.5" ></text>
</g>
<g >
<title>~:0:&lt;cudf._lib.csv.read_csv&gt; (65,184,338 samples, 94.16%)</title><rect x="33.4" y="149" width="1111.1" height="15.0" fill="rgb(214,64,46)" rx="2" ry="2" />
<text  x="36.45" y="159.5" >~:0:&lt;cudf._lib.csv.read_csv&gt;</text>
</g>
<g >
<title>~:0:&lt;cudf._lib.copying.gather&gt; (197,777 samples, 0.29%)</title><rect x="1156.6" y="133" width="3.4" height="15.0" fill="rgb(222,1,41)" rx="2" ry="2" />
<text  x="1159.61" y="143.5" ></text>
</g>
<g >
<title>dataframe.py:3973:merge (167,412 samples, 0.24%)</title><rect x="1144.5" y="165" width="2.9" height="15.0" fill="rgb(217,175,37)" rx="2" ry="2" />
<text  x="1147.51" y="175.5" ></text>
</g>
<g >
<title>column.py:825:take (125,409 samples, 0.18%)</title><rect x="1177.1" y="69" width="2.1" height="15.0" fill="rgb(218,100,13)" rx="2" ry="2" />
<text  x="1180.06" y="79.5" ></text>
</g>
<g >
<title>column.py:844:isin (590,854 samples, 0.85%)</title><rect x="1169.1" y="165" width="10.1" height="15.0" fill="rgb(210,80,7)" rx="2" ry="2" />
<text  x="1172.13" y="175.5" ></text>
</g>
<g >
<title>csv.py:13:read_csv (160,328 samples, 0.23%)</title><rect x="1173.5" y="133" width="2.8" height="15.0" fill="rgb(210,33,16)" rx="2" ry="2" />
<text  x="1176.52" y="143.5" ></text>
</g>
<g >
<title>~:0:&lt;built-in method cudf._lib.join.join&gt; (97,264 samples, 0.14%)</title><rect x="1145.7" y="117" width="1.7" height="15.0" fill="rgb(210,167,18)" rx="2" ry="2" />
<text  x="1148.71" y="127.5" ></text>
</g>
<g >
<title>dataloader.py:339:__iter__ (328,626 samples, 0.47%)</title><rect x="10.2" y="277" width="5.6" height="15.0" fill="rgb(252,155,0)" rx="2" ry="2" />
<text  x="13.23" y="287.5" ></text>
</g>
<g >
<title>ioutils.py:1090:get_filepath_or_buffer (499,466 samples, 0.72%)</title><rect x="24.9" y="149" width="8.5" height="15.0" fill="rgb(216,91,4)" rx="2" ry="2" />
<text  x="27.94" y="159.5" ></text>
</g>
<g >
<title>series.py:2343:_sort (161,357 samples, 0.23%)</title><rect x="1176.5" y="117" width="2.7" height="15.0" fill="rgb(209,71,22)" rx="2" ry="2" />
<text  x="1179.45" y="127.5" ></text>
</g>
<g >
<title>column.py:994:astype (105,570 samples, 0.15%)</title><rect x="1160.8" y="165" width="1.8" height="15.0" fill="rgb(221,62,20)" rx="2" ry="2" />
<text  x="1163.82" y="175.5" ></text>
</g>
<g >
<title>dataloader.py:473:_next_data (68,459,852 samples, 98.89%)</title><rect x="15.8" y="261" width="1166.9" height="15.0" fill="rgb(211,184,21)" rx="2" ry="2" />
<text  x="18.83" y="271.5" >dataloader.py:473:_next_data</text>
</g>
<g >
<title>~:0:&lt;built-in method isfinite&gt; (111,643 samples, 0.16%)</title><rect x="1188.1" y="165" width="1.9" height="15.0" fill="rgb(205,154,26)" rx="2" ry="2" />
<text  x="1191.10" y="175.5" ></text>
</g>
<g >
<title>genericpath.py:16:exists (499,090 samples, 0.72%)</title><rect x="24.9" y="133" width="8.5" height="15.0" fill="rgb(213,211,2)" rx="2" ry="2" />
<text  x="27.94" y="143.5" ></text>
</g>
<g >
<title>frame.py:1482:_apply_boolean_mask (413,349 samples, 0.60%)</title><rect x="1148.7" y="149" width="7.0" height="15.0" fill="rgb(242,101,15)" rx="2" ry="2" />
<text  x="1151.68" y="159.5" ></text>
</g>
<g >
<title>contextlib.py:71:inner (66,660,258 samples, 96.29%)</title><rect x="23.8" y="181" width="1136.2" height="15.0" fill="rgb(220,105,20)" rx="2" ry="2" />
<text  x="26.77" y="191.5" >contextlib.py:71:inner</text>
</g>
<g >
<title>contextlib.py:71:inner (252,653 samples, 0.36%)</title><rect x="1162.6" y="165" width="4.3" height="15.0" fill="rgb(238,70,16)" rx="2" ry="2" />
<text  x="1165.62" y="175.5" ></text>
</g>
<g >
<title>join.py:101:perform_merge (143,089 samples, 0.21%)</title><rect x="1144.9" y="133" width="2.5" height="15.0" fill="rgb(232,67,23)" rx="2" ry="2" />
<text  x="1147.92" y="143.5" ></text>
</g>
<g >
<title>column.py:983:sort_by_values (160,900 samples, 0.23%)</title><rect x="1176.5" y="101" width="2.7" height="15.0" fill="rgb(252,45,25)" rx="2" ry="2" />
<text  x="1179.46" y="111.5" ></text>
</g>
<g >
<title>_tensor_str.py:277:_str_intern (321,932 samples, 0.47%)</title><rect x="1184.5" y="213" width="5.5" height="15.0" fill="rgb(226,137,50)" rx="2" ry="2" />
<text  x="1187.51" y="223.5" ></text>
</g>
<g >
<title>fetch.py:44:&lt;listcomp&gt; (68,307,832 samples, 98.67%)</title><rect x="18.4" y="229" width="1164.3" height="15.0" fill="rgb(234,30,28)" rx="2" ry="2" />
<text  x="21.43" y="239.5" >fetch.py:44:&lt;listcomp&gt;</text>
</g>
<g >
<title>column.py:2025:arange (81,567 samples, 0.12%)</title><rect x="1172.1" y="149" width="1.4" height="15.0" fill="rgb(224,96,54)" rx="2" ry="2" />
<text  x="1175.09" y="159.5" ></text>
</g>
<g >
<title>_tensor_str.py:220:_tensor_str (321,567 samples, 0.46%)</title><rect x="1184.5" y="197" width="5.5" height="15.0" fill="rgb(206,20,49)" rx="2" ry="2" />
<text  x="1187.52" y="207.5" ></text>
</g>
<g >
<title>csv.py:13:read_csv (65,695,124 samples, 94.90%)</title><rect x="24.7" y="165" width="1119.8" height="15.0" fill="rgb(214,225,49)" rx="2" ry="2" />
<text  x="27.74" y="175.5" >csv.py:13:read_csv</text>
</g>
<g >
<title>all (69,228,920 samples, 100%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(234,119,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>_tensor_str.py:370:_str (322,102 samples, 0.47%)</title><rect x="1184.5" y="229" width="5.5" height="15.0" fill="rgb(248,223,27)" rx="2" ry="2" />
<text  x="1187.51" y="239.5" ></text>
</g>
<g >
<title>~:0:&lt;method 'int' of 'torch._C._TensorBase' objects&gt; (73,408 samples, 0.11%)</title><rect x="1181.5" y="197" width="1.2" height="15.0" fill="rgb(227,187,44)" rx="2" ry="2" />
<text  x="1184.47" y="207.5" ></text>
</g>
<g >
<title>contextlib.py:71:inner (162,872 samples, 0.24%)</title><rect x="1173.5" y="149" width="2.8" height="15.0" fill="rgb(220,124,43)" rx="2" ry="2" />
<text  x="1176.48" y="159.5" ></text>
</g>
<g >
<title>msms_profiler.py:71:main (69,228,920 samples, 100.00%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(245,56,16)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >msms_profiler.py:71:main</text>
</g>
<g >
<title>frame.py:507:_gather (124,794 samples, 0.18%)</title><rect x="1177.1" y="53" width="2.1" height="15.0" fill="rgb(215,44,50)" rx="2" ry="2" />
<text  x="1180.07" y="63.5" ></text>
</g>
<g >
<title>column.py:1401:build_column (108,400 samples, 0.16%)</title><rect x="1142.7" y="133" width="1.8" height="15.0" fill="rgb(228,209,54)" rx="2" ry="2" />
<text  x="1145.66" y="143.5" ></text>
</g>
<g >
<title>~:0:&lt;method 'item' of 'torch._C._TensorBase' objects&gt; (95,129 samples, 0.14%)</title><rect x="12.0" y="213" width="1.7" height="15.0" fill="rgb(214,141,40)" rx="2" ry="2" />
<text  x="15.04" y="223.5" ></text>
</g>
<g >
<title>~:0:&lt;cudf._lib.stream_compaction.apply_boolean_mask&gt; (394,962 samples, 0.57%)</title><rect x="1149.0" y="133" width="6.7" height="15.0" fill="rgb(219,207,46)" rx="2" ry="2" />
<text  x="1152.00" y="143.5" ></text>
</g>
<g >
<title>dataloader.py:401:__init__ (328,582 samples, 0.47%)</title><rect x="10.2" y="229" width="5.6" height="15.0" fill="rgb(253,8,27)" rx="2" ry="2" />
<text  x="13.23" y="239.5" ></text>
</g>
<g >
<title>~:0:&lt;built-in method torch._C._from_dlpack&gt; (133,340 samples, 0.19%)</title><rect x="1179.2" y="181" width="2.3" height="15.0" fill="rgb(242,49,35)" rx="2" ry="2" />
<text  x="1182.20" y="191.5" ></text>
</g>
<g >
<title>dataloader.py:465:__init__ (328,618 samples, 0.47%)</title><rect x="10.2" y="245" width="5.6" height="15.0" fill="rgb(253,221,21)" rx="2" ry="2" />
<text  x="13.23" y="255.5" ></text>
</g>
<g >
<title>dataloader.py:290:_get_iterator (328,623 samples, 0.47%)</title><rect x="10.2" y="261" width="5.6" height="15.0" fill="rgb(231,195,20)" rx="2" ry="2" />
<text  x="13.23" y="271.5" ></text>
</g>
<g >
<title>column.py:1537:as_column (104,716 samples, 0.15%)</title><rect x="1170.3" y="149" width="1.8" height="15.0" fill="rgb(219,224,54)" rx="2" ry="2" />
<text  x="1173.30" y="159.5" ></text>
</g>
<g >
<title>series.py:3652:isin (591,283 samples, 0.85%)</title><rect x="1169.1" y="181" width="10.1" height="15.0" fill="rgb(215,43,38)" rx="2" ry="2" />
<text  x="1172.12" y="191.5" ></text>
</g>
<g >
<title>collate.py:42:default_collate (111,150 samples, 0.16%)</title><rect x="16.5" y="229" width="1.9" height="15.0" fill="rgb(251,37,30)" rx="2" ry="2" />
<text  x="19.53" y="239.5" ></text>
</g>
<g >
<title>frame.py:507:_gather (209,514 samples, 0.30%)</title><rect x="1156.4" y="149" width="3.6" height="15.0" fill="rgb(237,96,37)" rx="2" ry="2" />
<text  x="1159.41" y="159.5" ></text>
</g>
<g >
<title>~:0:&lt;function Tensor.__format__ at 0x2ac6af1fa5f0&gt; (322,154 samples, 0.47%)</title><rect x="1184.5" y="261" width="5.5" height="15.0" fill="rgb(232,77,25)" rx="2" ry="2" />
<text  x="1187.51" y="271.5" ></text>
</g>
<g >
<title>frame.py:3173:_merge (165,237 samples, 0.24%)</title><rect x="1144.5" y="149" width="2.9" height="15.0" fill="rgb(240,20,53)" rx="2" ry="2" />
<text  x="1147.55" y="159.5" ></text>
</g>
<g >
<title>fetch.py:42:fetch (68,418,993 samples, 98.83%)</title><rect x="16.5" y="245" width="1166.2" height="15.0" fill="rgb(222,173,18)" rx="2" ry="2" />
<text  x="19.53" y="255.5" >fetch.py:42:fetch</text>
</g>
<g >
<title>msms_profiler.py:21:__init__ (69,410 samples, 0.10%)</title><rect x="1182.7" y="277" width="1.2" height="15.0" fill="rgb(224,194,48)" rx="2" ry="2" />
<text  x="1185.73" y="287.5" ></text>
</g>
<g >
<title>~:0:&lt;built-in method empty&gt; (106,175 samples, 0.15%)</title><rect x="10.2" y="213" width="1.8" height="15.0" fill="rgb(236,158,18)" rx="2" ry="2" />
<text  x="13.24" y="223.5" ></text>
</g>
<g >
<title>buffer.py:15:__init__ (131,156 samples, 0.19%)</title><rect x="1140.4" y="133" width="2.3" height="15.0" fill="rgb(211,220,30)" rx="2" ry="2" />
<text  x="1143.43" y="143.5" ></text>
</g>
<g >
<title>indexing.py:166:__getitem__ (252,709 samples, 0.37%)</title><rect x="1162.6" y="181" width="4.3" height="15.0" fill="rgb(221,184,45)" rx="2" ry="2" />
<text  x="1165.62" y="191.5" ></text>
</g>
</g>
</svg>
